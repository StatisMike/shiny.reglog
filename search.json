[{"path":"https://statismike.github.io/shiny.reglog/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 shiny.reglog authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://statismike.github.io/shiny.reglog/articles/RegLogServer_object.html","id":"about-r6-and-specifically-reglogserver-class","dir":"Articles","previous_headings":"","what":"About R6 and specifically RegLogServer Class","title":"RegLogServer object fields and methods","text":"R6 alternative class system available R users. driven towards Object Oriented Programming vs Functional Programming known R users via built-S3 class system. R6 ideal creating complex systems - keeps elements enclosed environment. R users actually uses R6 objects daily basis: eg. whole Shiny system built system R6 objects. Basically, know R6 system regards shiny.reglog usage , : RegLogServer RegLogDBIConnector RegLogGsheetConnector RegLogEmayiliConnector RegLogGmailConnector vanilla RegLogConnector, can use create Connector class inheritance. R6 objects initialization public elements, can accessed $. can either fields, holding values, methods containing functions. want get know R6 system whole advise check articles created R6 maintainers. talk thoroughly RegLogServer class public fields methods. multiple public elements RegLogServer. keep order, describe basis usage. code chunks refer called object assigned RegLogServer:","code":"RegLogServer <- RegLogServer$new(     dbConnector = dbConnector,     mailConnector = mailConnector)"},{"path":"https://statismike.github.io/shiny.reglog/articles/RegLogServer_object.html","id":"state-of-user-in-current-shinyapp-session","dir":"Articles","previous_headings":"","what":"State of user in current ShinyApp session","title":"RegLogServer object fields and methods","text":"Elements described important things every creator ShinyApp incorporates shiny.reglog using profit user login. reactiveVal objects, can observe changes access current value need include parentheses.","code":""},{"path":"https://statismike.github.io/shiny.reglog/articles/RegLogServer_object.html","id":"check-if-the-user-in-current-session-is-logged-in","dir":"Articles","previous_headings":"State of user in current ShinyApp session","what":"Check if the user in current session is logged in","title":"RegLogServer object fields and methods","text":"is_logged simple boolean value check user current session logged (TRUE) (FALSE)","code":"# observe the reactiveVal change observeEvent(RegLogServer$is_logged, {      # if contains TRUE: user is currently logged-in   if (RegLogServer$is_logged()) {     showModal(modalDialog(title = \"You are logged in!\"))     # if contains FALSE: user isn't logged-in   } else {     showModal(modalDialog(title = \"You are not logged in!\"))   } })"},{"path":"https://statismike.github.io/shiny.reglog/articles/RegLogServer_object.html","id":"current-id-of-the-user","dir":"Articles","previous_headings":"State of user in current ShinyApp session","what":"Current ID of the user","title":"RegLogServer object fields and methods","text":"user_id field (character string): unique user ID. user isn’t logged contains generated start session (logout) Universally Unique Identifier (use uuid::UUIDgenerate()). login contains username user chosen registration procedure.","code":"uuid::UUIDgenerate() #> [1] \"88432bcb-79d7-4955-af31-48efcc66a4d3\" RegLogServer$user_id()"},{"path":"https://statismike.github.io/shiny.reglog/articles/RegLogServer_object.html","id":"email-address-of-the-currently-logged-user","dir":"Articles","previous_headings":"State of user in current ShinyApp session","what":"Email address of the currently logged user","title":"RegLogServer object fields and methods","text":"user_mail field (character string): unique user email. user logged , contains email currently associated user_id. Otherwise, contains empty character string (\"\").","code":"RegLogServer$user_mail()"},{"path":"https://statismike.github.io/shiny.reglog/articles/RegLogServer_object.html","id":"account-id-of-the-logged-user","dir":"Articles","previous_headings":"State of user in current ShinyApp session","what":"Account ID of the logged user","title":"RegLogServer object fields and methods","text":"account_id field (character string): unique account ID. provides simple way relate specific logged users , custom tables database (eg.: settings saved specific users). value id column account table SQL databases row number - 1 (header) account spreadsheet googlesheet database.","code":"RegLogServer$account_id()"},{"path":"https://statismike.github.io/shiny.reglog/articles/RegLogServer_object.html","id":"user-logout","dir":"Articles","previous_headings":"","what":"User logout","title":"RegLogServer object fields and methods","text":"can insert event logout user calling public method.","code":"# if you create an actionButton \"logout_button\" in your UI, you can observe # its action and logout after press: observeEvent(input$logout_button, {   RegLogServer$logout() })"},{"path":"https://statismike.github.io/shiny.reglog/articles/RegLogServer_object.html","id":"ui-object-lists","dir":"Articles","previous_headings":"","what":"UI object lists","title":"RegLogServer object fields and methods","text":"dedicated functions creating UI different functionalities RegLog system: RegLog_login_UI, RegLog_register_UI, RegLog_credsEdit_UI RegLog_resetPass_UI. put whole default tagLists UI, though. expected users want freedom UI look like. ’s dedicated public fields containing named lists UI elements functionalities. can use create , custom renderUI output. UI_list_login containing elements login procedure tags UI_list_register containing elements register procedure tags UI_list_credsEdit containing elements credentials edit procedure tags UI_list_resetPass containing elements reset password procedure tags","code":""},{"path":"https://statismike.github.io/shiny.reglog/articles/RegLogServer_object.html","id":"message","dir":"Articles","previous_headings":"","what":"Message","title":"RegLogServer object fields and methods","text":"message field another reactiveVal value can used observe change RegLogServer object state. always contains recent object S3 class RegLogConnectorMessage, RegLogServer received dbConnector specifically generated communicate specific status changes. Messages received mailConnector aren’t exposed field. Instead, exposed RegLogServer$mail_message() field. separated don’t idicate change state RegLog system - instead, just show feedback mail sending service. Creation custom logic depending change isn’t necessary. can handy especially reason want inhibit default modalDialogs called RegLogServer inform end-user consequences actions (eg. successful login unsuccessful, inputed user ID password incorrect). Every RegLogConnectorMessage specific type list can contain four elements: time: numeric representation Sys.time() generated type: indicates type process message generated data: list containing data send message. Values contained can specific certain type message logcontent: RegLogConnectorMessages send received RegLogServer object (every RegLogConnector) appended object log field. Content saved note logs. want characterize types RegLogConnectorMessages can exposed RegLogServer$message() field. Besides also messages send RegLogServer Connectors. learn , read vignette Creating custom RegLogConnector handlers. Conditions every default modalDialog written order checked best results. Conditions written like value == FALSE can checked like - message given type always contains object. Conditions written like isFALSE(value) means specified value message can NULL.","code":""},{"path":"https://statismike.github.io/shiny.reglog/articles/RegLogServer_object.html","id":"type-ping","dir":"Articles","previous_headings":"Message","what":"Type: ping","title":"RegLogServer object fields and methods","text":"Type message produced classes inheriting RegLogConnector upon initialization, making also first available RegLogServer$message() field. Received message type contains: data: response_time: time receiving ping message sending message back logcontent: message upon initialization hold value “init”.","code":""},{"path":"https://statismike.github.io/shiny.reglog/articles/RegLogServer_object.html","id":"type-login_front","dir":"Articles","previous_headings":"Message","what":"Type: login_front","title":"RegLogServer object fields and methods","text":"Type message generated RegLogServer object . Contains information invalidity values provided login procedure user. contains: success: boolean - FALSE input_provided: boolean - FALSE message type binded default modalDialogs: login_noInput (input_provided == FALSE)","code":""},{"path":"https://statismike.github.io/shiny.reglog/articles/RegLogServer_object.html","id":"type-login","dir":"Articles","previous_headings":"Message","what":"Type: login","title":"RegLogServer object fields and methods","text":"Type message received database connectors responses login procedure. contains: success: boolean - TRUE login successful username: boolean - TRUE username exists database password: boolean - TRUE password provided match user_id: character - contains user_id presented afterwards RegLogServer$user_id(). success == TRUE user_mail: character - contains user_mail presented afterwards RegLogServer$user_mail(). success == TRUE brief information username provided user login successful. message type binded default modalDialogs: login_badId (data$success == FALSE && data$username == FALSE) login_badPass (data$success == FALSE && data$password == FALSE) login_success (data$success == TRUE)","code":""},{"path":"https://statismike.github.io/shiny.reglog/articles/RegLogServer_object.html","id":"type-register_front","dir":"Articles","previous_headings":"Message","what":"Type: register_front","title":"RegLogServer object fields and methods","text":"Type message generated RegLogServer object . Contains information invalidity values provided register procedure user. contains: success: boolean - FALSE input_provided: boolean - TRUE needed inputs provided valid_id: boolean - TRUE provided user ID valid valid_email: boolean - TRUE provided email valid valid_pass: boolean - TRUE provided password valid identical_pass: boolean - FALSE (last condition checked) message type binded default modalDialogs: register_noInput (data$input_provided == FALSE) register_nonValidId (isFALSE(data$valid_id)) register_nonValidEmail (isFALSE(data$valid_email)) register_nonValidPass (isFALSE(data$valid_pass)) register_notIndenticalPass (isFALSE(data$identical_pass))","code":""},{"path":"https://statismike.github.io/shiny.reglog/articles/RegLogServer_object.html","id":"type-register","dir":"Articles","previous_headings":"Message","what":"Type: register","title":"RegLogServer object fields and methods","text":"Type message received database connector responses register procedure. contains: success: boolean - TRUE register successful username: boolean - TRUE conflicts existing usernames database email: boolean - TRUE conflicts existing e-mails database user_id: character - contains user ID new user registered. success == TRUE user_mail: character - contains e-mail new user registered. success == TRUE registered user ID mail register successful value element caused conflict. message type binded default modalDialogs: register_existingId (data$success == FALSE && data$username == FALSE) register_existingEmail (data$success == FALSE && data$email == FALSE) register_success (data$success == TRUE)","code":""},{"path":"https://statismike.github.io/shiny.reglog/articles/RegLogServer_object.html","id":"type-credsedit_front","dir":"Articles","previous_headings":"Message","what":"Type: credsEdit_front","title":"RegLogServer object fields and methods","text":"Type message generated RegLogServer object . Contains information invalidity values provided credentials change procedure user. contains: success: boolean - FALSE (generated something invalid) user_logged: boolean - TRUE user currently logged input_provided: boolean - TRUE required inputs empty valid_id: boolean - TRUE provided user ID valid valid_email: boolean - TRUE provided email valid valid_pass: boolean - TRUE provided password valid identical_pass: boolean - FALSE (last condition checked) message type binded default modalDialogs: credsEdit_notLogged (data$user_logged == FALSE) credsEdit_noInput_pass (isFALSE(data$input_provided) && change == \"pass\") credsEdit_noInput_other (isFALSE(data$input_provided) && change == \"\") credsEdit_nonValidId (isFALSE(data$valid_id)) credsEdit_nonValidEmail (isFALSE(data$valid_email)) credsEdit_nonValidPass (isFALSE(data$valid_pass)) credsEdit_notIdenticalPass (isFALSE(data$identical_pass))","code":""},{"path":"https://statismike.github.io/shiny.reglog/articles/RegLogServer_object.html","id":"type-credsedit","dir":"Articles","previous_headings":"Message","what":"Type: credsEdit","title":"RegLogServer object fields and methods","text":"Type message received database connector responses credentials edit procedure. contains: success: boolean - TRUE credentials edit successful username: boolean - TRUE provided username found password: boolean - TRUE provided password correct new_username: boolean - TRUE provided new ID weren’t database (conflicts). conflict. new_mail: boolean - TRUE provided new e-mail weren’t database (conflicts). conflict. new_user_id: character - contains new user ID. user ID changed. new_user_mail: character - contains new user e-mail. user mail changed. new_user_pass: boolean - TRUE. user password changed. brief information changes. message type binded default modalDialogs: credsEdit_badId (data$success == FALSE && data$username == FALSE) credsEdit_badPass (data$success == FALSE && data$password == FALSE) credsEdit_existingId (data$success == FALSE && isFALSE(data$username)) credsEdit_existingEmail (data$success == FALSE && isFALSE(data$email)) credsEdit_success (data$success == TRUE)","code":""},{"path":"https://statismike.github.io/shiny.reglog/articles/RegLogServer_object.html","id":"type-resetpass_front","dir":"Articles","previous_headings":"Message","what":"Type: resetPass_front","title":"RegLogServer object fields and methods","text":"Type message generated RegLogServer object . Contains information invalidity values provided password reset procedure user. contains: success: boolean - FALSE (message generated something invalid) step: character - either generate confirm, depending step process input_provided: boolean - TRUE inputs required specific step provided valid_pass: boolean - TRUE provided password valid identical_pass: boolean - FALSE (last condition checked) message type binded default modalDialogs: resetPass_noInput_generate (data$step == \"generate\" && isFALSE(data$input_provided)) resetPass_noInput_confirm (data$step == \"confirm\" && isFALSE(data$input_provided)) resetPass_nonValidPass (isFALSE(data$valid_pass)) resetPass_notIdenticalPass (isFALSE(data$identical_pass))","code":""},{"path":"https://statismike.github.io/shiny.reglog/articles/RegLogServer_object.html","id":"type-resetpass_generate","dir":"Articles","previous_headings":"Message","what":"Type: resetPass_generate","title":"RegLogServer object fields and methods","text":"Type message received database connector responses password reset procedure - code generation step. contains: success: boolean - TRUE reset code created successfully username: boolean - TRUE username found database email: character - email reset code sent information user reset code generated email sent. message type binded default modalDialog: resetPass_badId (data$username == FALSE) resetPass_codeGenerated (data$success == TRUE)","code":""},{"path":"https://statismike.github.io/shiny.reglog/articles/RegLogServer_object.html","id":"type-resetpass_confirm","dir":"Articles","previous_headings":"Message","what":"Type: resetPass_confirm","title":"RegLogServer object fields and methods","text":"Type message received database connector responses password reset procedure - code confirmation step. contains: success: boolean - TRUE password changed successfully username: boolean - TRUE username found database code_valid: boolean - TRUE reset code valid (matched expired) username password changed. message type binded default modalDialogs: resetPass_badId (data$username == FALSE) resetPass_nonValidCode (isFALSE(data$code_valid)) resetPass_success (data$success == TRUE)","code":""},{"path":"https://statismike.github.io/shiny.reglog/articles/RegLogServer_object.html","id":"type-logout","dir":"Articles","previous_headings":"Message","what":"Type: logout","title":"RegLogServer object fields and methods","text":"Type message generated RegLogServer , indicating user logged . contains: success: boolean - TRUE user logged logged username user logged message type binded default modalDialog: logout_notLogIn (data$success == FALSE) logout_success (data$success == TRUE)","code":""},{"path":"https://statismike.github.io/shiny.reglog/articles/RegLogServer_object.html","id":"mail-message","dir":"Articles","previous_headings":"","what":"Mail message","title":"RegLogServer object fields and methods","text":"mail_message field contains last RegLogConnectorMessage received mailConnector. provides information last process sending email, don’t signalize change data state current login session, separated much important message field.","code":""},{"path":"https://statismike.github.io/shiny.reglog/articles/RegLogServer_object.html","id":"type-reglog_mail","dir":"Articles","previous_headings":"Mail message","what":"Type: reglog_mail","title":"RegLogServer object fields and methods","text":"type message received default e-mail sending RegLog processess. contains: process: character - name process e-mail sent. Either ‘register’, ‘credsEdit’ ‘resetPass’ success: boolean - TRUE email sent sucessfully username address email sent, name process triggered . success == FALSE also contain error message.","code":""},{"path":"https://statismike.github.io/shiny.reglog/articles/RegLogServer_object.html","id":"type-custom_mail","dir":"Articles","previous_headings":"Mail message","what":"Type: custom_mail","title":"RegLogServer object fields and methods","text":"type message isn’t received regular RegLog run. response message can use send custom e-mail. contains responses reglog_mail message. send custom email using mailConnector, pass listener RegLogConnectorMessage type custom_mail, example :","code":"# you can observe some kind of event to trigger the send observeEvent(input$send_custom_email, {      # as the username and email will be acquired from RegLogServer,   # it is best to make sure that the user is logged-in   req(RegLogServer$is_logged())      message_to_send <- RegLogConnectorMessage(     type = \"custom_mail\",     # name your process in some unique way - it will be tracked by the app      # and saved into logs     process = \"attachement_mail!\",     # username and email can be gotten from RegLogServer     username = RegLogServer$user_id(),     email = RegLogServer$user_mail(),     # we can specify the subject and body of message ourselves     mail_subject = \"Custom message with attachement\",     # it's best for the body to contain html code     mail_body = \"<p>This is a custom message send from my App<\/p>                  <p>It is completely optional, but that kind of message can also                     contain an attachment!<\/p>\",     # optionally: attachment     mail_attachement = \"files/myplot.png\"   ) })"},{"path":"https://statismike.github.io/shiny.reglog/articles/RegLogServer_object.html","id":"collected-logs-during-the-app-session","dir":"Articles","previous_headings":"","what":"Collected logs during the App session","title":"RegLogServer object fields and methods","text":"lifespan session, RegLogServer object sends, shows receives many different RegLogConnectorMessages. default, messages send dbConnector mailConnector received back saved RegLogServer$logs field, separate lists per direction. also messages shown object (namely messages \"_front\" suffix message type logout) contain following information: time message generated session message generated (taken session$token) type message note logcontent message saved","code":""},{"path":"https://statismike.github.io/shiny.reglog/articles/RegLogServer_object.html","id":"collecting-all-logs","dir":"Articles","previous_headings":"Collected logs during the App session","what":"Collecting all logs","title":"RegLogServer object fields and methods","text":"can use public method get whole content logs collected point time form data.frame.","code":"logs_df <- RegLogServer$get_logs()"},{"path":"https://statismike.github.io/shiny.reglog/articles/RegLogServer_object.html","id":"configuring-reglogserver","dir":"Articles","previous_headings":"","what":"Configuring RegLogServer","title":"RegLogServer object fields and methods","text":"whole RegLog system created elasticity mind, also many options customizing behaviour RegLogServer object.","code":""},{"path":"https://statismike.github.io/shiny.reglog/articles/RegLogServer_object.html","id":"customizing-messages-and-texts","dir":"Articles","previous_headings":"Configuring RegLogServer","what":"Customizing messages and texts","title":"RegLogServer object fields and methods","text":"RegLogServer object initialization can specify arguments: app_name - name application show default emails sent users. Defaults name root folder application. app_address - URL application show default emails sent users. Defaults URL App accessed client side (actually: NULL, address got session start) lang - language default texts presented. Defaults “en” English. can also specify “i18” RegLog show content identifiers ease building translations using external tools, eg. shiny.i18n. custom_txts - defaults NULL. Can named list character vectors used place defined text language choosing (check , use RegLog_texts() function). can define custom texts initialization RegLogServer: use_modals - defaults TRUE. specified FALSE, default modals shown. can also inhibit specific modal dialogs providing named list FALSE values. Eg:","code":"# initialize new RegLogServer object RegLog <- RegLogServer$new(   # assign created dbConnector and mailConnector   dbConnector = dbConnector,   mailConnector = mailConnector,   # replace default title and body of `login_success` modalDialog   custom_txts = list(     login_success_t = \"Welcome!\",     login_success_b = \"Hi! It's nice to see you logged into our ShinyApp!\"   ) ) # initialize new RegLogServer object RegLog <- RegLogServer$new(   # assign created dbConnector and mailConnector   dbConnector = dbConnector,   mailConnector = mailConnector,   # inhibit default 'login_success' and 'register_success' modals   use_modals = list(     login_success = FALSE,     register_success = FALSE   ) )"},{"path":"https://statismike.github.io/shiny.reglog/articles/RegLogServer_object.html","id":"options-related-to-log-saving","dir":"Articles","previous_headings":"Configuring RegLogServer","what":"Options related to log saving","title":"RegLogServer object fields and methods","text":"two options can defined script relates log collection: RegLogServer.logs defines saving logs RegLogServer$logs RegLogServer.logs_to_database defines saving logs table spreadsheet created log-recording purposes. save logs database, remember firstly create table spreadsheet. tables creation either DBI_tables_create gsheet_tables_create specify argument use_log = T. define options just insert beginning script: Possible values: 0: message saved logs/database 1: messages sent received saved 2: messages saved isn’t recommended save logs database using RegLogGsheetConnector database driver. actions made googlesheets database taking significant time. Recommended testing/debugging runs.","code":"# examples with default values options(\"RegLogServer.logs\" = 1) options(\"RegLogServer.logs_to_database\" = 0)"},{"path":"https://statismike.github.io/shiny.reglog/articles/RegLogServer_object.html","id":"options-related-to-e-mail-sending","dir":"Articles","previous_headings":"Configuring RegLogServer","what":"Options related to e-mail sending","title":"RegLogServer object fields and methods","text":"default, RegLogServer trigger e-mail send users ShinyApp registered, attempt reset password procedure (provide reset code) changing user ID e-mail credentials edit procedure. e-mail sending mandatory reset password procedure, option inhibit , messages recommended enriching user experience. concerned amount e-mails can sent app, can inhibit messages using following options: options(\"RegLogServer.register_mail\" = FALSE) options(\"RegLogServer.credsEdit_mail\" = FALSE) inhibit e-mail sending (eg. app development, debugging playing package currently), can pass RegLogConnector object mailConnector argument initialization RegLogServer:","code":"RegLog <- RegLogServer$new(   dbConnector = somedbConnector,   mailConnector = RegLogConnector$new() )"},{"path":"https://statismike.github.io/shiny.reglog/articles/create_custom_handlers.html","id":"reglogconnector-dataflow","dir":"Articles","previous_headings":"","what":"RegLogConnector dataflow","title":"Creating custom RegLogConnector handlers","text":"dbConnectors (RegLogDBIConnector RegLogGsheetConnector) mailConnectors (RegLogEmayiliConnector RegLogGmailrConnector) inherits general class: RegLogConnector. three public fields key whole dataflow: RegLogConnector$listener() - reactiveVal object intakes RegLogConnectorMessage object. RegLogConnector listens change value object reacts accordingly. RegLogConnector$handlers - named list handler functions. every type received message specific function appended . return another RegLogConnectorMessage object informing result function. RegLogConnector$message() - reactiveVal object containing RegLogConnectorMessage returned handler function.","code":""},{"path":"https://statismike.github.io/shiny.reglog/articles/create_custom_handlers.html","id":"reglogconnectormessage-object","dir":"Articles","previous_headings":"RegLogConnector dataflow","what":"RegLogConnectorMessage object","title":"Creating custom RegLogConnector handlers","text":"RegLogConnector object reacts upon receiving kind RegLogConnectorMessage object responds likewise. S3 class object contains four fields: time: timestamp message generated type: character string declaring handler function RegLogConnector called object receive message. data: list objects, usually kind input output handler function logcontent: character string declaring content saved RegLogConnector logs. can create message freely using function name:","code":"message <-    RegLogConnectorMessage(     type = \"test\",     dataframe = mtcars,     numbers = runif(10, 0, 100),     logcontent = paste0(\"I contain data.frame and random numbers\"))  str(message) #> List of 4 #>  $ time      : chr \"2022-03-27 09:01:42.396\" #>  $ type      : chr \"test\" #>  $ data      :List of 2 #>   ..$ dataframe:'data.frame':    32 obs. of  11 variables: #>   .. ..$ mpg : num [1:32] 21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ... #>   .. ..$ cyl : num [1:32] 6 6 4 6 8 6 8 4 4 6 ... #>   .. ..$ disp: num [1:32] 160 160 108 258 360 ... #>   .. ..$ hp  : num [1:32] 110 110 93 110 175 105 245 62 95 123 ... #>   .. ..$ drat: num [1:32] 3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ... #>   .. ..$ wt  : num [1:32] 2.62 2.88 2.32 3.21 3.44 ... #>   .. ..$ qsec: num [1:32] 16.5 17 18.6 19.4 17 ... #>   .. ..$ vs  : num [1:32] 0 0 1 1 0 1 0 1 1 1 ... #>   .. ..$ am  : num [1:32] 1 1 1 0 0 0 0 0 0 0 ... #>   .. ..$ gear: num [1:32] 4 4 4 3 3 3 3 4 4 4 ... #>   .. ..$ carb: num [1:32] 4 4 1 1 2 1 4 2 2 4 ... #>   ..$ numbers  : num [1:10] 61.6 99.5 92.2 42.8 94.2 ... #>  $ logcontent: chr \"I contain data.frame and random numbers\" #>  - attr(*, \"class\")= chr \"RegLogConnectorMessage\""},{"path":"https://statismike.github.io/shiny.reglog/articles/create_custom_handlers.html","id":"default-handler-functions-for-dbconnectors","dir":"Articles","previous_headings":"","what":"Default handler functions for dbConnectors","title":"Creating custom RegLogConnector handlers","text":"RegLogDBIConnector RegLogGsheetConnector contain default handler functions. vignette focus messages received handler functions general usability. learn messages produced functions, check “RegLogServer object fields methods” vignette “Message” section - messages finally exposed RegLogServer$message() public field. functions aren’t exported, used internally. can read documentation though usual syntax ?function console. Documentation rendered information react creating RegLogConnectorMessages .","code":""},{"path":"https://statismike.github.io/shiny.reglog/articles/create_custom_handlers.html","id":"handler-for-login-type-message","dir":"Articles","previous_headings":"Default handler functions for dbConnectors","what":"Handler for login type message","title":"Creating custom RegLogConnector handlers","text":"RegLogDBIConnector: DBI_login_handler RegLogGsheetConnector: gsheet_login_handler functions handling querying database specified user ShinyApp user ID password check match. Message structure:","code":"login_message <-    RegLogConnectorMessage(     type = \"login\",     username = \"Whatever\",     password = \"&f5*MSYj^niDt=V'3.[dyEX.C/\")  str(login_message) #> List of 4 #>  $ time      : chr \"2022-03-27 09:01:42.482\" #>  $ type      : chr \"login\" #>  $ data      :List of 2 #>   ..$ username: chr \"Whatever\" #>   ..$ password: chr \"&f5*MSYj^niDt=V'3.[dyEX.C/\" #>  $ logcontent: NULL #>  - attr(*, \"class\")= chr \"RegLogConnectorMessage\""},{"path":"https://statismike.github.io/shiny.reglog/articles/create_custom_handlers.html","id":"handlers-for-register-type-message","dir":"Articles","previous_headings":"Default handler functions for dbConnectors","what":"Handlers for register type message","title":"Creating custom RegLogConnector handlers","text":"RegLogDBIConnector: DBI_register_handler RegLogGsheetConnector: gsheet_register_handler functions handling querying database checking specified user ID email new user aren’t already existing database. conflicts, hash provided password input new row. Message structure:","code":"register_message <-    RegLogConnectorMessage(     type = \"register\",     username = \"IAmNewThere\",     email = \"something@new.com\",     password = \"veryHardP422w0rd!\")  str(register_message) #> List of 4 #>  $ time      : chr \"2022-03-27 09:01:42.560\" #>  $ type      : chr \"register\" #>  $ data      :List of 3 #>   ..$ username: chr \"IAmNewThere\" #>   ..$ email   : chr \"something@new.com\" #>   ..$ password: chr \"veryHardP422w0rd!\" #>  $ logcontent: NULL #>  - attr(*, \"class\")= chr \"RegLogConnectorMessage\""},{"path":"https://statismike.github.io/shiny.reglog/articles/create_custom_handlers.html","id":"handlers-for-credsedit-type-message","dir":"Articles","previous_headings":"Default handler functions for dbConnectors","what":"Handlers for credsEdit type message","title":"Creating custom RegLogConnector handlers","text":"RegLogDBIConnector: DBI_credsEdit_handler RegLogGsheetConnector: gsheet_credsEdit_handler functions querying database search specified username password. confirming user identity, can update database row user : new username, new email new password. Message structure:","code":"credsEdit_message <-    RegLogConnectorMessage(     type = \"credsEdit\",     username = \"Whatever\",     password = \"&f5*MSYj^niDt=V'3.[dyEX.C/\",     new_username = \"Whenever\",     new_email = \"edited@email.com\",     new_password = \"veryHardP422w0rd!\")  str(credsEdit_message) #> List of 4 #>  $ time      : chr \"2022-03-27 09:01:42.637\" #>  $ type      : chr \"credsEdit\" #>  $ data      :List of 5 #>   ..$ username    : chr \"Whatever\" #>   ..$ password    : chr \"&f5*MSYj^niDt=V'3.[dyEX.C/\" #>   ..$ new_username: chr \"Whenever\" #>   ..$ new_email   : chr \"edited@email.com\" #>   ..$ new_password: chr \"veryHardP422w0rd!\" #>  $ logcontent: NULL #>  - attr(*, \"class\")= chr \"RegLogConnectorMessage\""},{"path":"https://statismike.github.io/shiny.reglog/articles/create_custom_handlers.html","id":"handlers-for-resetcode_generate-type-message","dir":"Articles","previous_headings":"Default handler functions for dbConnectors","what":"Handlers for resetCode_generate type message","title":"Creating custom RegLogConnector handlers","text":"RegLogDBIConnector: DBI_resetPass_generation_handler RegLogGsheetConnector: gsheet_resetPass_generation_handler functions querying database search specified username. confirming specified username exists, generates inputs reset code user can use generate new password. Message structure:","code":"resetPass_generate_message <-    RegLogConnectorMessage(     type = \"resetPass_generate\",     username = \"Whatever\")  str(resetPass_generate_message) #> List of 4 #>  $ time      : chr \"2022-03-27 09:01:42.718\" #>  $ type      : chr \"resetPass_generate\" #>  $ data      :List of 1 #>   ..$ username: chr \"Whatever\" #>  $ logcontent: NULL #>  - attr(*, \"class\")= chr \"RegLogConnectorMessage\""},{"path":"https://statismike.github.io/shiny.reglog/articles/create_custom_handlers.html","id":"handlers-for-resetcode_confirm-type-message","dir":"Articles","previous_headings":"Default handler functions for dbConnectors","what":"Handlers for resetCode_confirm type message","title":"Creating custom RegLogConnector handlers","text":"RegLogDBIConnector: DBI_resetPass_confirmation_handler RegLogGsheetConnector: gsheet_resetPass_confirmation_handler functions querying database search specified username confirming provided reset code correct. confirmation, marks reset code used updates password user. Message structure:","code":"resetPass_confirm_message <-   RegLogConnectorMessage(     type = \"resetPass_confirm\",     username = \"Whatever\",     reset_code = \"4265417643\",     password = \"veryHardP422w0rd!\")  str(resetPass_confirm_message) #> List of 4 #>  $ time      : chr \"2022-03-27 09:01:42.795\" #>  $ type      : chr \"resetPass_confirm\" #>  $ data      :List of 3 #>   ..$ username  : chr \"Whatever\" #>   ..$ reset_code: chr \"4265417643\" #>   ..$ password  : chr \"veryHardP422w0rd!\" #>  $ logcontent: NULL #>  - attr(*, \"class\")= chr \"RegLogConnectorMessage\""},{"path":"https://statismike.github.io/shiny.reglog/articles/create_custom_handlers.html","id":"default-handler-function-for-mailconnectors","dir":"Articles","previous_headings":"","what":"Default handler function for mailConnectors","title":"Creating custom RegLogConnector handlers","text":"default handlers mailConnectors use handler functions: RegLogEmayiliConnector: emayili_reglog_mail_handler RegLogGmailrConnector: gmailr_reglog_mail_handler send email specified address using subject html body email kept mailConnector$mails[[message_type]] list. also replace occurences ?username?, ?email?, ?app_name?, ?app_address? ?reset_code? respective values received RegLogConnectorMessage. Mail creation chosen mailConnector$mails public field basis process RegLogConnectorMessage value. also provided handlers send custom e-mails logged user. RegLogEmayiliConnector: emayili_custom_mail_handler RegLogGmailrConnector: gmailr_custom_mail_handler sending email specified address parsing provided inside message subject body, providing also option send attachment. additional parsing done process value informative - saved logs presented RegLogServer$mail_message() field.","code":"resetPass_mail_message <-    RegLogConnectorMessage(     type = \"reglog_mail\",     process = \"resetPass\",     username = \"Whatever\",     email = \"edited@email.com\",     app_name = \"RegLog Nice ShinyApp\",     app_address = \"https://reglog.nice.com\",     reset_code = \"4265417643\")  str(resetPass_mail_message) #> List of 4 #>  $ time      : chr \"2022-03-27 09:01:42.873\" #>  $ type      : chr \"reglog_mail\" #>  $ data      :List of 6 #>   ..$ process    : chr \"resetPass\" #>   ..$ username   : chr \"Whatever\" #>   ..$ email      : chr \"edited@email.com\" #>   ..$ app_name   : chr \"RegLog Nice ShinyApp\" #>   ..$ app_address: chr \"https://reglog.nice.com\" #>   ..$ reset_code : chr \"4265417643\" #>  $ logcontent: NULL #>  - attr(*, \"class\")= chr \"RegLogConnectorMessage\" message_to_send <- RegLogConnectorMessage(     type = \"custom_mail\",     process = \"attachment_mail\",     username = \"Whatever\",     email = \"edited@email.com\",     mail_subject = \"Custom message with attachement\",     mail_body = \"<p>This is a custom message send from my App<\/p>                  <p>It is completely optional, but that kind of message can also                     contain an attachment!<\/p>\",     mail_attachement = \"files/myplot.png\"   )"},{"path":"https://statismike.github.io/shiny.reglog/articles/create_custom_handlers.html","id":"how-to-create-custom-handler-function","dir":"Articles","previous_headings":"","what":"How to create custom handler function","title":"Creating custom RegLogConnector handlers","text":"Handler function system dbConnectors mailConnectors allows creating custom logic communicating . example purposes custom action described vignette process saving reading googlesheet based database results simple, 10-item questionnaire: Rosenberg’s Self-esteem scale.","code":""},{"path":"https://statismike.github.io/shiny.reglog/articles/create_custom_handlers.html","id":"setup-the-grounds-to-store-the-data","dir":"Articles","previous_headings":"How to create custom handler function","what":"Setup the grounds to store the data","title":"Creating custom RegLogConnector handlers","text":"Firstly, need create another sheet googlesheet used RegLogGsheetConnector store data. Besides summed score also need timestamp username read recent row currently logged user.","code":"# create new sheet to the googlesheet googlesheets4::write_sheet(   ss = gsheet_ss,   sheet = \"SES_results\",   # append 0-row data.frame to create the \"schema\" for the sheet   data = data.frame(timestamp = as.character(NA),                     user_id = as.character(NA),                     score = as.numeric(NA))[-1,] )"},{"path":"https://statismike.github.io/shiny.reglog/articles/create_custom_handlers.html","id":"create-a-handler-for-writing-to-database","dir":"Articles","previous_headings":"How to create custom handler function","what":"Create a handler for writing to database","title":"Creating custom RegLogConnector handlers","text":"handler functions need take arguments objects self, private message return RegLogConnectorMessage.","code":"write_SES_handler <- function(self, private, message) {      googlesheets4::sheet_append(     # ID of the connected googlesheet is stored inside private of the     # RegLogGsheetConnector     ss = private$gsheet_ss,     sheet = \"SES_results\",     data = data.frame(       # db_timestamp creates nicely formatted and interpretable by most       # databases current time       timestamp = db_timestamp(),       # user ID and score should be received inside received message       user_id = message$data$user_id,       score = message$data$score       ))      return(RegLogConnectorMessage(type = \"write_SES\",                                 success = TRUE))    }"},{"path":"https://statismike.github.io/shiny.reglog/articles/create_custom_handlers.html","id":"create-a-handler-for-reading-from-database","dir":"Articles","previous_headings":"How to create custom handler function","what":"Create a handler for reading from database","title":"Creating custom RegLogConnector handlers","text":"now writing handler ready, create handler retrieve data another user session.","code":"read_SES_handler <- function(self, private, message) {      # read all results   SES_results <- googlesheets4::read_sheet(     ss = private$gsheet_ss,     sheet = \"SES_results\",     col_types = \"ccn\")      # get the lastest result for the current user   SES_results <- SES_results |>     dplyr::filter(user_id == message$data$user_id) |>     dplyr::arrange(dplyr::desc(timestamp)) |>     dplyr::slice_head()      # return the RegLogConnectorMessage with the score if available   if (nrow(SES_results) == 1) {     return(RegLogConnectorMessage(type = \"read_SES\",                                   success = TRUE,                                   score = SES_results$score))   } else {     return(RegLogConnectorMessage(type = \"read_SES\",                                   success = FALSE))   } }"},{"path":"https://statismike.github.io/shiny.reglog/articles/create_custom_handlers.html","id":"have-everything-in-motion","dir":"Articles","previous_headings":"How to create custom handler function","what":"Have everything in motion","title":"Creating custom RegLogConnector handlers","text":"present code server logic, containing needed elements appending created custom handlers sending RegLogConnectorMessages write read data new sheet.","code":"# create and assign RegLogServer object RegLog <- RegLogServer$new(   # create googlesheet connector   dbConector = RegLogGsheetConnector$new(     # provide correct googlesheet ID     gsheet_ss = gsheet_ss,     # provide handlers in a named list. Names will be used to choose on basis     # of received RegLogConnectorMessage which function to use     custom_handlers = list(write_SES = write_SES_handler,                            read_SES = read_SES_handler)   ),   # provide some mailConnector with all needed data   mailConnector = mailConnector )  # create an event to write the data to the database: there actionButton will # trigger it observeEvent(input$write_ses_result, {      # make sure the inputs are provided   req(input$SES_1, input$SES_2, input$SES_3, input$SES_4, input$SES_5,       input$SES_6, input$SES_7, input$SES_8, input$SES_9, input$SES_10)      # get the score by summing all raw scores of items   score <- sum(input$SES_1, input$SES_2, input$SES_3, input$SES_4, input$SES_5,                input$SES_6, input$SES_7, input$SES_8, input$SES_9, input$SES_10)      # send message to the dbConnector's listener   RegLog$dbConnector$listener(     RegLogConnectorMessage(       # specify correct type - the same as the name of the handler       type = \"write_SES\",       # get required user ID from the RegLog object       user_id = RegLog$user_id(),       score = score)) })  # create an event to read the data from the database: eg. another actionButton observeEvent(input$read_last_ses_result, {      # send correct message to the dbConnector's listener   RegLog$dbConnector$listener(     RegLogConnectorMessage(       type = \"read_SES\",       user_id = RegLog$user_id())   ) })  # assign the retrieved data: eg. to the reactive  SES_result <- reactive(   # retrieved data will be available in `message()` field of RegLog object   received_message <- RegLog$message()   # make sure to only process correct type of message   req(received_message$type == \"read_SES\")    if (!is.null(score)) {     # get the score if there was any saved in the database     received_message$data$score   })"},{"path":"https://statismike.github.io/shiny.reglog/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Michal Kosinski. Author, maintainer.","code":""},{"path":"https://statismike.github.io/shiny.reglog/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kosinski M (2022). shiny.reglog: Optional Login Registration Module System ShinyApps. R package version 0.5.0, https://statismike.github.io/shiny.reglog/.","code":"@Manual{,   title = {shiny.reglog: Optional Login and Registration Module System for ShinyApps},   author = {Michal Kosinski},   year = {2022},   note = {R package version 0.5.0},   url = {https://statismike.github.io/shiny.reglog/}, }"},{"path":[]},{"path":"https://statismike.github.io/shiny.reglog/index.html","id":"1-introduction","dir":"","previous_headings":"","what":"1. Introduction","title":"Optional Login and Registration Module System for ShinyApps","text":"user authentication Shiny applications can useful. Mainly, user can login read write results session relational database. hand, may handy App allow access unregistered users. need secure ShinyApp, better alternatives (shinymanager shinyauthr) package contains modules use Shiny application allowing automatically insert boxes login, register, credentials edit password reset procedures. shiny.reglog supports data containers either databases accessed RSQLite, RMariaDB, RMySQL RPostgreSQL drivers googlesheets-based database (accessed googlesheets4 package). highly recommended use one DBI-supported databases, though. much optimized secure, database never loaded whole memory, queried needed. googlesheets database much easier set-, shouldn’t used expecting big userbase. Registration, credentials edit password reset procedures programmatically send email user ShinyApp - welcome , inform change user ID /email give reset code reset password. shiny.reglog supports two methods email sending: via emayili gmailr packages. pros cons, depending accesses: emayili allows usage many SMTP servers, gmailr allowing using gmail messaging via Google REST API. emayili recommended applications. gmailr can useful already application registered authorized mail sending scope. Currently package major change code - basically full rewrite allow security, usage databases customization. Past functions still available current version, generate deprecation warnings.","code":""},{"path":"https://statismike.github.io/shiny.reglog/index.html","id":"2-additional-information","dir":"","previous_headings":"","what":"2. Additional information","title":"Optional Login and Registration Module System for ShinyApps","text":"Basic information shiny.reglog contained within document. resources learn usage: can access demonstration shinyApp showcase mode shinyapps.io can run interactive demo RStudio using RegLogDemo() function. use mocked mailConnector default RegLogEmayiliConnector provide arguments required emayili backend. information read vignettes.","code":""},{"path":"https://statismike.github.io/shiny.reglog/index.html","id":"3-basic-structure","dir":"","previous_headings":"","what":"3. Basic structure","title":"Optional Login and Registration Module System for ShinyApps","text":"three main objects used implementing RegLog system login registration ShinyApp. need defined server code. dbConnector: one RegLogDBIConnector RegLogGsheetConnector. handle writes, edits inputs users database. mailConnector: one RegLogEmayiliConnector RegLogGmailrConnector. handle automatical emailing user emails. RegLogServer: main module producing controlling UI reactivity login registration system. uses dbConnector mailConnector actions external R.","code":""},{"path":"https://statismike.github.io/shiny.reglog/index.html","id":"4-installation","dir":"","previous_headings":"","what":"4. Installation","title":"Optional Login and Registration Module System for ShinyApps","text":"can install version shiny.reglog GitHub :","code":"# install version 0.5.0 from GitHub  install.packages(\"devtools\") devtools::install_github(\"StatisMike/shiny.reglog\")  # or install old version from CRAN # install.packages(\"shiny.reglog\")"},{"path":"https://statismike.github.io/shiny.reglog/index.html","id":"5-setting-up-dbconnector","dir":"","previous_headings":"","what":"5. Setting up dbConnector","title":"Optional Login and Registration Module System for ShinyApps","text":"need create dbConnector object used RegLogServer write read user data database. set-database RegLog system, can use helper functions included package. tested guarantee compatible structure data.","code":""},{"path":"https://statismike.github.io/shiny.reglog/index.html","id":"51-googlesheet-database-method-regloggsheetconnector","dir":"","previous_headings":"5. Setting up dbConnector","what":"5.1 Googlesheet database method (RegLogGsheetConnector)","title":"Optional Login and Registration Module System for ShinyApps","text":"Create googlesheet file googledrive support database. can use gsheet_tables_create() function, default creates empty spreadsheets configured correctly. wish import existing credentials, can giving data.frame object user_data argument: Configure googlesheets4 package use --band (non-interactive) auth. information visit googlesheets4 documentation. server part ShinyApp define RegLogGsheetConnector provide afterwards RegLogServer object","code":"# create googlesheet and gather its id for later usage # you can also specify optional 'name' argument for custom gsheet name  gsheet_id <- gsheet_tables_create()  # save you gsheet_id - you need to provide it later to your dbConnector # get some credentials credentials <- data.frame(   username = \"ShinyReglogTest\",   password = \"VeryHardPassword\",   email = \"shinyreglog@test\"   )  # create gsheet database with some credentials gsheet_id <- gsheet_tables_create(   user_data = credentials,   # as the password was not hashed with `script` before, it need to be   # hashed now   hash_passwords = T) server <- function(input, output, session) {      dbConnector <- RegLogGsheetConnector$new(     gsheet_ss = gsheet_id)    }"},{"path":"https://statismike.github.io/shiny.reglog/index.html","id":"52-dbi-compatible-sql-database-reglogdbiconnector","dir":"","previous_headings":"5. Setting up dbConnector","what":"5.2 DBI compatible SQL database (RegLogDBIConnector)","title":"Optional Login and Registration Module System for ShinyApps","text":"RegLog system box supports SQLite, MySQL, MariaDB PostgreSQL databases. can use DBI_tables_create function, default creates empty tables configured correctly. wish import credentials, can providing data.frame object user_data argument: server part ShinyApp define RegLogDBIConnector provide afterwards RegLogServer object.","code":"# create a connection to the database. Remember to use user with CREATE TABLE # scope enabled when useing MySQL, MariaDB or PostgreSQL connection  conn <- DBI::dbConnect(   RSQLite::SQLite(),   dbname = \"reglog_db.sqlite\" )  # using this connection create the tables. DBI_tables_create(conn = conn)  # disconnect from the database after creation DBI::dbDisconnect(conn) # get some credentials credentials <- data.frame(   username = \"ShinyReglogTest\",   password = \"VeryHardPassword\",   email = \"shinyreglog@test\")  conn <- DBI::dbConnect(   RSQLite::SQLite(),   dbname = \"reglog_db.sqlite\" )  # create database using the connection DBI_tables_create(conn = conn,                   user_data = credentials)  DBI::dbDisconnect(conn) server <- function(input, output, session) {      dbConnector <- RegLogDBIConnector$new(     driver = RSQLite::SQLite(),     dbname = \"reglog_db.sqlite\")    }"},{"path":"https://statismike.github.io/shiny.reglog/index.html","id":"6-setting-up-mail-connectors","dir":"","previous_headings":"","what":"6. Setting up mail connectors","title":"Optional Login and Registration Module System for ShinyApps","text":"need create mailConnector object used RegLogServer write read user data database. two classes defined use emayili gmailr packages backend.","code":""},{"path":"https://statismike.github.io/shiny.reglog/index.html","id":"61-using-emayili-reglogemayiliconnector","dir":"","previous_headings":"6. Setting up mail connectors","what":"6.1. Using emayili (RegLogEmayiliConnector)","title":"Optional Login and Registration Module System for ShinyApps","text":"backend recommended use. supports many SMTP servers, mostly username password based identification.","code":"server <- function(input, output, session) {      mailConnector <- RegLogEmayiliConnector$new(     from = \"email@sending.com\",     # to learn how to setup emayili smtp server read ?emayili::server     smtp = emayili::server(...)   )    }"},{"path":"https://statismike.github.io/shiny.reglog/index.html","id":"62-using-gmailr-regloggmailrconnector","dir":"","previous_headings":"6. Setting up mail connectors","what":"6.2. Using gmailr (RegLogGmailrConnector)","title":"Optional Login and Registration Module System for ShinyApps","text":"backend viable app registered Google Cloud Console. authorizes sends email via gmail REST API, needing Oauth authorization high scopes.","code":"server <- function(input, output, session) {      mailConnector <- RegLogGmailrConnector$new(     from = \"email@gmail.com\"   )    }"},{"path":"https://statismike.github.io/shiny.reglog/index.html","id":"7-setup-reglogserver","dir":"","previous_headings":"","what":"7. Setup RegLogServer","title":"Optional Login and Registration Module System for ShinyApps","text":"RegLog system generated maintained object class RegLogSystem unison dbConnector mailConnector choosing. setup pretty straightforward: Besides two mandatory arguments, also additional arguments used customization. app_name: application name. used within emails send users. specified, name folder containing application files used. app_address: URL address application. used within emails send users. specified, email address contained within session$clientData used. lang: language used UI elements send emails. Defaults ‘en’ English. Currently also ‘pl’ Polish supported. Besides , can also specify ‘i18’ generate text indicators - external methods can used parse message given language can used (eg. shiny.i18n package). custom_txts: named list character strings custom texts used system. information call ?RegLog_txt. use_modals: either boolean indicating default modalDialogs shown named list FALSE values inhibiting specific ones. information read RegLogServer object fields methods, section Message. modals listed alongside conditions appearance. module_id: character string ID module. Recommended leave default - unless name taken another module.","code":"server <- function(input, output, session) {      RegLog <- RegLogServer$new(     # both of these elements need to be defined firstly or in this call     dbConnector = dbConnector,     mailConnector = mailConnector   ) }"},{"path":"https://statismike.github.io/shiny.reglog/index.html","id":"71-retrieve-information-from-reglogserver","dir":"","previous_headings":"7. Setup RegLogServer","what":"7.1. Retrieve information from RegLogServer","title":"Optional Login and Registration Module System for ShinyApps","text":"setting assigning object application logic can observe status user current session public fields containing reactiveVal objects. much learned RegLogServer object - information read RegLogServer object fields methods. information enough basic setup.","code":"## if you assigned the RegLogServer to 'RegLog' object, as in examples above:  # boolean showing if the user is logged in: RegLog$is_logged()  # character vector containing user ID: either specific to the user if logged # in, or unique anonymous ID generated with 'uuid::UUIDgenerate()' RegLog$user_id()  # character vector containing user email if logged in RegLog$user_mail()  # integer of the account ID inside the database - for identifying the logged user # across relative tables RegLog$account_id()"},{"path":"https://statismike.github.io/shiny.reglog/index.html","id":"8-insert-ui-elements","dir":"","previous_headings":"","what":"8. Insert UI elements","title":"Optional Login and Registration Module System for ShinyApps","text":"Every part UI generated RegLogServer, accessed provided functions containing tagList.","code":""},{"path":"https://statismike.github.io/shiny.reglog/index.html","id":"81-login-ui","dir":"","previous_headings":"8. Insert UI elements","what":"8.1. Login UI","title":"Optional Login and Registration Module System for ShinyApps","text":"Providing GUI allow logging user already registered application.","code":"RegLog_login_UI()"},{"path":"https://statismike.github.io/shiny.reglog/index.html","id":"82-register-ui","dir":"","previous_headings":"8. Insert UI elements","what":"8.2. Register UI","title":"Optional Login and Registration Module System for ShinyApps","text":"Providing GUI registering new account. user ID e-mail needs unique within databasa user ID need consist 8-30 alphanumeric characters small letter big letter number special character user email also validated account registration, user receive confirmation email password.","code":"RegLog_register_UI()"},{"path":"https://statismike.github.io/shiny.reglog/index.html","id":"83-credentials-edit-ui","dir":"","previous_headings":"8. Insert UI elements","what":"8.3. Credentials edit UI","title":"Optional Login and Registration Module System for ShinyApps","text":"Providing GUI changing credentials. user need logged change data confirm identity, need provide current password password user ID /e-mail checks register procedure conducted user ID /e-mail change user receive confirmation e-mail","code":"RegLog_credsEdit_UI()"},{"path":"https://statismike.github.io/shiny.reglog/index.html","id":"84-reset-password-ui","dir":"","previous_headings":"8. Insert UI elements","what":"8.4. Reset password UI","title":"Optional Login and Registration Module System for ShinyApps","text":"Providing GUI password reset. case user forgetting password, can reset providing user ID mail message containing reset code sent user inputing reset code e-mail allow password change password check new password conducted register procedure","code":"RegLog_resetPass_UI()"},{"path":"https://statismike.github.io/shiny.reglog/reference/DBI_credsEdit_handler.html","id":null,"dir":"Reference","previous_headings":"","what":"DBI edit to the database handler — DBI_credsEdit_handler","title":"DBI edit to the database handler — DBI_credsEdit_handler","text":"Default handler function querying database confirm credentials edit procedure update values saved within database. Used within object RegLogDBIConnector class internally.","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/DBI_credsEdit_handler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DBI edit to the database handler — DBI_credsEdit_handler","text":"","code":"DBI_credsEdit_handler(self, private, message)"},{"path":"https://statismike.github.io/shiny.reglog/reference/DBI_credsEdit_handler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DBI edit to the database handler — DBI_credsEdit_handler","text":"self R6 object element private R6 object element message RegLogConnectorMessage need contain within data: password can also contain elements change: new_username new_email new_password","code":""},{"path":[]},{"path":"https://statismike.github.io/shiny.reglog/reference/DBI_login_handler.html","id":null,"dir":"Reference","previous_headings":"","what":"DBI login handler — DBI_login_handler","title":"DBI login handler — DBI_login_handler","text":"Default handler function querying database confirm login procedure. Used within object RegLogDBIConnector class internally.","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/DBI_login_handler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DBI login handler — DBI_login_handler","text":"","code":"DBI_login_handler(self, private, message)"},{"path":"https://statismike.github.io/shiny.reglog/reference/DBI_login_handler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DBI login handler — DBI_login_handler","text":"self R6 object element private R6 object element message RegLogConnectorMessage contain within data: username password","code":""},{"path":[]},{"path":"https://statismike.github.io/shiny.reglog/reference/DBI_register_handler.html","id":null,"dir":"Reference","previous_headings":"","what":"DBI register handler — DBI_register_handler","title":"DBI register handler — DBI_register_handler","text":"Default handler function querying database confirm registration validity input new data. Used within object RegLogDBIConnector class internally.","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/DBI_register_handler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DBI register handler — DBI_register_handler","text":"","code":"DBI_register_handler(self, private, message)"},{"path":"https://statismike.github.io/shiny.reglog/reference/DBI_register_handler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DBI register handler — DBI_register_handler","text":"self R6 object element private R6 object element message RegLogConnectorMessage contain within data: username password email","code":""},{"path":[]},{"path":"https://statismike.github.io/shiny.reglog/reference/DBI_resetPass_confirmation_handler.html","id":null,"dir":"Reference","previous_headings":"","what":"DBI resetpass code confirmation handler — DBI_resetPass_confirmation_handler","title":"DBI resetpass code confirmation handler — DBI_resetPass_confirmation_handler","text":"Default handler function querying database confirm credentials edit procedure update values saved within database. Used within object RegLogDBIConnector class internally.","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/DBI_resetPass_confirmation_handler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DBI resetpass code confirmation handler — DBI_resetPass_confirmation_handler","text":"","code":"DBI_resetPass_confirmation_handler(self, private, message)"},{"path":"https://statismike.github.io/shiny.reglog/reference/DBI_resetPass_confirmation_handler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DBI resetpass code confirmation handler — DBI_resetPass_confirmation_handler","text":"self R6 object element private R6 object element message RegLogConnectorMessage need contain within data: username reset_code password","code":""},{"path":[]},{"path":"https://statismike.github.io/shiny.reglog/reference/DBI_resetPass_generation_handler.html","id":null,"dir":"Reference","previous_headings":"","what":"DBI resetpass code generation handler — DBI_resetPass_generation_handler","title":"DBI resetpass code generation handler — DBI_resetPass_generation_handler","text":"Default handler function querying database confirm credentials edit procedure update values saved within database. Used within object RegLogDBIConnector class internally.","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/DBI_resetPass_generation_handler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DBI resetpass code generation handler — DBI_resetPass_generation_handler","text":"","code":"DBI_resetPass_generation_handler(self, private, message)"},{"path":"https://statismike.github.io/shiny.reglog/reference/DBI_resetPass_generation_handler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DBI resetpass code generation handler — DBI_resetPass_generation_handler","text":"self R6 object element private R6 object element message RegLogConnectorMessage need contain within data: username","code":""},{"path":[]},{"path":"https://statismike.github.io/shiny.reglog/reference/DBI_tables_create.html","id":null,"dir":"Reference","previous_headings":"","what":"Create RegLog-valid database tables with DBI — DBI_tables_create","title":"Create RegLog-valid database tables with DBI — DBI_tables_create","text":"Create RegLog-valid database tables DBI","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/DBI_tables_create.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create RegLog-valid database tables with DBI — DBI_tables_create","text":"","code":"DBI_tables_create(   conn,   account_name = \"account\",   reset_code_name = \"reset_code\",   use_log = FALSE,   log_name = \"logs\",   user_data = NULL,   hash_passwords = FALSE,   verbose = TRUE )"},{"path":"https://statismike.github.io/shiny.reglog/reference/DBI_tables_create.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create RegLog-valid database tables with DBI — DBI_tables_create","text":"conn DBI connection object account_name Name table storing user accounts credentials. Defaults 'account'. Mandatory table. reset_code_name Name table storing generated password reset codes. Defaults 'reset_code'. Mandatory table. use_log table keeping RegLogServer logs also created? Defaults FALSE log_name Name table storing logs RegLogServer object. Used use_log = TRUE. Defaults logs user_data wish import existing user database, can input data.frame table argument. contain columns: username, password, email. Defaults NULL. hash_passwords importing table users upon tables creation, can also specify password hashed using scrypt::hashPassword. Defaults FALSE. unhashed passwords imported table, set option TRUE. verbose Boolean specific actions made function printed back console. Defaults TRUE.","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/DBI_tables_create.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create RegLog-valid database tables with DBI — DBI_tables_create","text":"List results creation","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/DBI_tables_create.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create RegLog-valid database tables with DBI — DBI_tables_create","text":"Currently, function tested working correctly SQLite, MySQL, MariaDB PostrgreSQL databases. want use another DBI-supported database, need create tables ways. Created tables following structure: account (default name) id: integer, primary key, auto-increment username: varchar(255), NULL, unique password: varchar(255), NULL email: varchar(255), NULL, unique create_time: datetime, NULL update_time: datetime, NULL reset_code (default name) id: integer, primary key, auto-increment user_id: integer, NULL reset_code: varchar(10), NULL used: tinyint, NULL create_time: datetime, NULL update_time: datetime, NULL logs (default name, optional) id: integer, primary key, auto-increment time: datetime, NULL session: varchar(255), NULL direction: varchar(255), NULL type: varchar(255), NULL note: varchar(255)","code":""},{"path":[]},{"path":"https://statismike.github.io/shiny.reglog/reference/DBI_tables_create.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create RegLog-valid database tables with DBI — DBI_tables_create","text":"","code":"library(shiny.reglog)  # create a tenporary SQLite database conn <- DBI::dbConnect(   RSQLite::SQLite(),   dbname = \":memory:\" )  # mockup user data user_data <-    data.frame(username = c(\"Whatever\", \"Hanuka\", \"Helsinki\", \"How_come\"),               password = c(\"&f5*MSYj^niDt=V'3.[dyEX.C/\", \"%}&B[fs\\\\}5PKE@,*+V\\\\tx9\\\"at]\",                      \"35z*ofW\\\\'G_8,@vCC`]~?e$Jm%\", \"s:;r_eLn?-D6;oA-=\\\"^R(-Ew<x\"),               email = c(\"what@mil.com\", \"hehe@soso.so\", \"nider@what.no\", \"crazzz@simpsy.com\"))  # create the tables and input the data (hashing the passwords in the process) DBI_tables_create(conn = conn,                   user_data = user_data,                   hash_passwords = TRUE,                   verbose = FALSE) #> $account #> $account$table_name #> [1] \"account\" #>  #> $account$result #> [1] TRUE #>  #> $account$data_import #> [1] 4 #>  #>  #> $reset_code #> $reset_code$table_name #> [1] \"reset_code\" #>  #> $reset_code$result #> [1] TRUE #>  #>   # check generater tables DBI::dbListTables(conn = conn) #> [1] \"account\"    \"reset_code\"  # check the \"user\" table for user data DBI::dbReadTable(conn = conn,                  \"account\") #>   id username #> 1  1 Whatever #> 2  2   Hanuka #> 3  3 Helsinki #> 4  4 How_come #>                                                                                                                           password #> 1 c2NyeXB0ABAAAAAIAAAAAa2D9Oy+adDEhwgp3wTaIMSztmIJGmHebrhQc9tzhwXw5TjaoIZxTtQq7PB0mPqiTaXzOEeuA9tbs2ZsnYHm/os0iAiMDzvNWnSPIMNvgUur #> 2 c2NyeXB0ABAAAAAIAAAAAY9UK2bRHTQGsERU7uV11wqZbHjnEbEoJuN07n3N0WN2XaBf8tzvqg8Pp6YxL2T0h9aeR0EsT7LMoY9SjHpw+KzFyGysOTxk58buaNVjwegS #> 3 c2NyeXB0ABAAAAAIAAAAARtlhe5dVlInhtAxKVe9OHD+DTvWSZKuCwz9uVWX1Z5t7yFwF6/0rPC9oPC8X6W3/h1Ar1EGQd7NRDXGCVBX8HQ8UxuADeH+opl7R5vfBVpm #> 4 c2NyeXB0ABAAAAAIAAAAAVBxSBFIAxX+bx6EbYpvbBvko6gv2BQjRvXxVnmLpemRW8hfEhyLxmB4H0k5A9OpcYJ02AbeFozNmG3vYtuWqZhilSEFV9ZCcEcjI4YwdfbH #>               email             create_time             update_time #> 1      what@mil.com 2022-03-27 09:01:29.084 2022-03-27 09:01:29.084 #> 2      hehe@soso.so 2022-03-27 09:01:29.084 2022-03-27 09:01:29.084 #> 3     nider@what.no 2022-03-27 09:01:29.084 2022-03-27 09:01:29.084 #> 4 crazzz@simpsy.com 2022-03-27 09:01:29.084 2022-03-27 09:01:29.084  # disconnect DBI::dbDisconnect(conn = conn)"},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogConnector.html","id":null,"dir":"Reference","previous_headings":"","what":"RegLog connector template — RegLogConnector","title":"RegLog connector template — RegLogConnector","text":"Parent class RegLog connectors","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogConnector.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"RegLog connector template — RegLogConnector","text":"module_id character vector specifying automatically-generated module_id listener server module listener reactiveVal object keeps listening changes message reactiveVal containing outward message log list containing data received sent messages object handlers named list containing functions used handle different types RegLogConnectorMessage. Name element corresponds 'type' handle.","code":""},{"path":[]},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogConnector.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"RegLog connector template — RegLogConnector","text":"RegLogConnector$get_logs() RegLogConnector$new() RegLogConnector$suspend() RegLogConnector$resume() RegLogConnector$clone()","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogConnector.html","id":"method-get-logs-","dir":"Reference","previous_headings":"","what":"Method get_logs()","title":"RegLog connector template — RegLogConnector","text":"Function receive saved logs object form single data.frame","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogConnector.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RegLog connector template — RegLogConnector","text":"","code":"RegLogConnector$get_logs()"},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogConnector.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"RegLog connector template — RegLogConnector","text":"can specify custom handler functions named list passed custom_handlers arguments object initialization. Custom handler take arguments: self private - relating R6 object message class RegLogConnectorMessage. return return RegLogConnectorMessage object","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogConnector.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"RegLog connector template — RegLogConnector","text":"data.frame","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogConnector.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"RegLog connector template — RegLogConnector","text":"Initialization object. Sets listener reactiveVal initializes listening server module","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogConnector.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"RegLog connector template — RegLogConnector","text":"","code":"RegLogConnector$new(custom_handlers = NULL)"},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogConnector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"RegLog connector template — RegLogConnector","text":"custom_handlers named list custom handler functions. Custom handler take arguments: self private - relating R6 object message class RegLogConnectorMessage. return return RegLogConnectorMessage object.","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogConnector.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"RegLog connector template — RegLogConnector","text":"object RegLogConnector class","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogConnector.html","id":"method-suspend-","dir":"Reference","previous_headings":"","what":"Method suspend()","title":"RegLog connector template — RegLogConnector","text":"Suspend listening changes","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogConnector.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"RegLog connector template — RegLogConnector","text":"","code":"RegLogConnector$suspend()"},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogConnector.html","id":"method-resume-","dir":"Reference","previous_headings":"","what":"Method resume()","title":"RegLog connector template — RegLogConnector","text":"Resume listening changes","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogConnector.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"RegLog connector template — RegLogConnector","text":"","code":"RegLogConnector$resume()"},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogConnector.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"RegLog connector template — RegLogConnector","text":"objects class cloneable method.","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogConnector.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"RegLog connector template — RegLogConnector","text":"","code":"RegLogConnector$clone(deep = FALSE)"},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogConnector.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"RegLog connector template — RegLogConnector","text":"deep Whether make deep clone.","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogConnectorMessage.html","id":null,"dir":"Reference","previous_headings":"","what":"create RegLogConnectorMessage object — RegLogConnectorMessage","title":"create RegLogConnectorMessage object — RegLogConnectorMessage","text":"Create object ReglogConnectorMessage class. used send data objects inherit class RegLogConnector","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogConnectorMessage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create RegLogConnectorMessage object — RegLogConnectorMessage","text":"","code":"RegLogConnectorMessage(type, ..., logcontent = NULL)"},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogConnectorMessage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create RegLogConnectorMessage object — RegLogConnectorMessage","text":"type character string declaring type message ... named arguments passed data logcontent character string. Optional description save logs.","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogConnectorMessage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"create RegLogConnectorMessage object — RegLogConnectorMessage","text":"object RegLogConnector class, containing fields: time: numeric representation Sys.time() type: character specifying type message data: list values sent alongside message logcontent: Character string information saved logs. Optional.","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogDBIConnector.html","id":null,"dir":"Reference","previous_headings":"","what":"Connector to DBI-valid databases — RegLogDBIConnector","title":"Connector to DBI-valid databases — RegLogDBIConnector","text":"Object class handles connections RegLogServer object database. created handle DBI compatible drivers. Provides methods used RegLogServer get send data.","code":""},{"path":[]},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogDBIConnector.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Connector to DBI-valid databases — RegLogDBIConnector","text":"shiny.reglog::RegLogConnector -> RegLogDBIConnector","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogDBIConnector.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Connector to DBI-valid databases — RegLogDBIConnector","text":"shiny.reglog::RegLogConnector$get_logs() shiny.reglog::RegLogConnector$resume() shiny.reglog::RegLogConnector$suspend()","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogDBIConnector.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Connector to DBI-valid databases — RegLogDBIConnector","text":"RegLogDBIConnector$new() RegLogDBIConnector$clone()","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogDBIConnector.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Connector to DBI-valid databases — RegLogDBIConnector","text":"Initialization object. Creates initial connection database.","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogDBIConnector.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Connector to DBI-valid databases — RegLogDBIConnector","text":"","code":"RegLogDBIConnector$new(   driver,   ...,   table_names = c(\"account\", \"reset_code\", \"logs\"),   custom_handlers = NULL )"},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogDBIConnector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connector to DBI-valid databases — RegLogDBIConnector","text":"driver Call specifies driver used queries ... arguments used DBI::dbConnect() call table_names character vector. Contains names tables database: first containing user data, second - reset codes information, third (optional) - logs object. info check documentation DBI_database_create. custom_handlers named list custom handler functions. Custom handler take arguments: self private - relating R6 object message class RegLogConnectorMessage. return return RegLogConnectorMessage object.","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogDBIConnector.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Connector to DBI-valid databases — RegLogDBIConnector","text":"object RegLogDBIConnector class","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogDBIConnector.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Connector to DBI-valid databases — RegLogDBIConnector","text":"objects class cloneable method.","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogDBIConnector.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Connector to DBI-valid databases — RegLogDBIConnector","text":"","code":"RegLogDBIConnector$clone(deep = FALSE)"},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogDBIConnector.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connector to DBI-valid databases — RegLogDBIConnector","text":"deep Whether make deep clone.","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogDemo.html","id":null,"dir":"Reference","previous_headings":"","what":"Demonstration ShinyApp with basic RegLog system — RegLogDemo","title":"Demonstration ShinyApp with basic RegLog system — RegLogDemo","text":"can play little RegLogSever functionalities launching ShinyApp. demo needs also installation 'RSQLite' package create menage temporary database.","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogDemo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Demonstration ShinyApp with basic RegLog system — RegLogDemo","text":"","code":"RegLogDemo(emayili_smtp = NULL, emayili_from = NULL)"},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogDemo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Demonstration ShinyApp with basic RegLog system — RegLogDemo","text":"emayili_smtp defined emayili smtp server e-mail provider. kept default NULL, e-mail sending functionality used. provided, require installation 'emayili' package. emayili_from String containing e-mail thesending take place. Used 'emayili_smtp' defined.","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogEmayiliConnector.html","id":null,"dir":"Reference","previous_headings":"","what":"RegLogConnector for email sending via emayili package — RegLogEmayiliConnector","title":"RegLogConnector for email sending via emayili package — RegLogEmayiliConnector","text":"use object, RegLogServer can send emails confirming registration containing code password reset procedure.","code":""},{"path":[]},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogEmayiliConnector.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"RegLogConnector for email sending via emayili package — RegLogEmayiliConnector","text":"shiny.reglog::RegLogConnector -> RegLogEmayiliConnector","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogEmayiliConnector.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"RegLogConnector for email sending via emayili package — RegLogEmayiliConnector","text":"mails List containing default mail templates use default mail handlers register password reset","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogEmayiliConnector.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"RegLogConnector for email sending via emayili package — RegLogEmayiliConnector","text":"shiny.reglog::RegLogConnector$get_logs() shiny.reglog::RegLogConnector$resume() shiny.reglog::RegLogConnector$suspend()","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogEmayiliConnector.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"RegLogConnector for email sending via emayili package — RegLogEmayiliConnector","text":"RegLogEmayiliConnector$new() RegLogEmayiliConnector$clone()","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogEmayiliConnector.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"RegLogConnector for email sending via emayili package — RegLogEmayiliConnector","text":"Initialization object. Creates smtp server email sending.","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogEmayiliConnector.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RegLogConnector for email sending via emayili package — RegLogEmayiliConnector","text":"","code":"RegLogEmayiliConnector$new(   from,   smtp,   lang = \"en\",   custom_txts = NULL,   custom_handlers = NULL,   custom_mails = NULL )"},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogEmayiliConnector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"RegLogConnector for email sending via emayili package — RegLogEmayiliConnector","text":"Character containing content email. smtp Object created emayili::server similiar functions. lang character specyfiyng language use texts generated UI. Defaults 'en' English. Currently 'pl' Polish also supported. custom_txts named list containing character strings custom messages. Defaults NULL, built-strings used. custom_handlers named list custom handler functions. Custom handler take arguments: self private - relating R6 object message class RegLogConnectorMessage. return return RegLogConnectorMessage object. custom_mails named list containing character strings structure elements mails field. elements need present.","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogEmayiliConnector.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"RegLogConnector for email sending via emayili package — RegLogEmayiliConnector","text":"default mails used register_mail reset_pass_mail handlers. change mail used handlers can pass character strings custom_mail argument initialization append directly list. stored (passed accordingly) list structure: register subject body resetPass subject body credsEdit subject body","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogEmayiliConnector.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"RegLogConnector for email sending via emayili package — RegLogEmayiliConnector","text":"objects class cloneable method.","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogEmayiliConnector.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"RegLogConnector for email sending via emayili package — RegLogEmayiliConnector","text":"","code":"RegLogEmayiliConnector$clone(deep = FALSE)"},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogEmayiliConnector.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"RegLogConnector for email sending via emayili package — RegLogEmayiliConnector","text":"deep Whether make deep clone.","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogGmailrConnector.html","id":null,"dir":"Reference","previous_headings":"","what":"RegLogConnector for email sending via emayili package — RegLogGmailrConnector","title":"RegLogConnector for email sending via emayili package — RegLogGmailrConnector","text":"use object, RegLogServer can send emails confirming registration containing code password reset procedure.","code":""},{"path":[]},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogGmailrConnector.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"RegLogConnector for email sending via emayili package — RegLogGmailrConnector","text":"shiny.reglog::RegLogConnector -> RegLogGmailrConnector","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogGmailrConnector.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"RegLogConnector for email sending via emayili package — RegLogGmailrConnector","text":"mails List containing default mail templates use default mail handlers register password reset","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogGmailrConnector.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"RegLogConnector for email sending via emayili package — RegLogGmailrConnector","text":"shiny.reglog::RegLogConnector$get_logs() shiny.reglog::RegLogConnector$resume() shiny.reglog::RegLogConnector$suspend()","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogGmailrConnector.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"RegLogConnector for email sending via emayili package — RegLogGmailrConnector","text":"RegLogGmailrConnector$new() RegLogGmailrConnector$clone()","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogGmailrConnector.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"RegLogConnector for email sending via emayili package — RegLogGmailrConnector","text":"Initialization object. Creates smtp server email sending.","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogGmailrConnector.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RegLogConnector for email sending via emayili package — RegLogGmailrConnector","text":"","code":"RegLogGmailrConnector$new(   from,   lang = \"en\",   custom_txts = NULL,   custom_handlers = NULL,   custom_mails = NULL )"},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogGmailrConnector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"RegLogConnector for email sending via emayili package — RegLogGmailrConnector","text":"Character containing content email. lang character specyfiyng language use texts generated UI. Defaults 'en' English. Currently 'pl' Polish also supported. custom_txts named list containing character strings custom messages. Defaults NULL, built-strings used. custom_handlers named list custom handler functions. Custom handler take arguments: self private - relating R6 object message class RegLogConnectorMessage. return return RegLogConnectorMessage object. custom_mails named list containing character strings structure elements mails field. elements need present.","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogGmailrConnector.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"RegLogConnector for email sending via emayili package — RegLogGmailrConnector","text":"default mails used register_mail reset_pass_mail handlers. change mail used handlers can pass character strings custom_mail argument initialization append directly list. stored (passed accordingly) list structure: register subject body resetPass subject body credsEdit subject body","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogGmailrConnector.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"RegLogConnector for email sending via emayili package — RegLogGmailrConnector","text":"objects class cloneable method.","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogGmailrConnector.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"RegLogConnector for email sending via emayili package — RegLogGmailrConnector","text":"","code":"RegLogGmailrConnector$clone(deep = FALSE)"},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogGmailrConnector.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"RegLogConnector for email sending via emayili package — RegLogGmailrConnector","text":"deep Whether make deep clone.","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogGsheetConnector.html","id":null,"dir":"Reference","previous_headings":"","what":"Connector to googlesheet database — RegLogGsheetConnector","title":"Connector to googlesheet database — RegLogGsheetConnector","text":"Object class handles connections RegLogServer object database. created handle googlesheet database. Provides methods used RegLogServer get send data.","code":""},{"path":[]},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogGsheetConnector.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Connector to googlesheet database — RegLogGsheetConnector","text":"shiny.reglog::RegLogConnector -> RegLogGsheetConnector","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogGsheetConnector.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Connector to googlesheet database — RegLogGsheetConnector","text":"shiny.reglog::RegLogConnector$get_logs() shiny.reglog::RegLogConnector$resume() shiny.reglog::RegLogConnector$suspend()","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogGsheetConnector.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Connector to googlesheet database — RegLogGsheetConnector","text":"RegLogGsheetConnector$new() RegLogGsheetConnector$clone()","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogGsheetConnector.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Connector to googlesheet database — RegLogGsheetConnector","text":"Initialization object. Creates initial connection database.","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogGsheetConnector.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Connector to googlesheet database — RegLogGsheetConnector","text":"","code":"RegLogGsheetConnector$new(   gsheet_ss,   gsheet_sheetnames = c(\"account\", \"reset_code\", \"logs\"),   custom_handlers = NULL )"},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogGsheetConnector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connector to googlesheet database — RegLogGsheetConnector","text":"gsheet_ss id googlesheet holding database gsheet_sheetnames character vector. Contains names sheets googlesheet: first containing user data, second - reset codes information, third (optional) - logs object. info check documentation gsheet_database_create. custom_handlers named list custom handler functions. Custom handler take arguments: self private - relating R6 object message class RegLogConnectorMessage. return RegLogConnectorMessage object.","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogGsheetConnector.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Connector to googlesheet database — RegLogGsheetConnector","text":"object RegLogDBIConnector class","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogGsheetConnector.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Connector to googlesheet database — RegLogGsheetConnector","text":"objects class cloneable method.","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogGsheetConnector.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Connector to googlesheet database — RegLogGsheetConnector","text":"","code":"RegLogGsheetConnector$clone(deep = FALSE)"},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogGsheetConnector.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connector to googlesheet database — RegLogGsheetConnector","text":"deep Whether make deep clone.","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogServer.html","id":null,"dir":"Reference","previous_headings":"","what":"Login and registration moduleServer — RegLogServer","title":"Login and registration moduleServer — RegLogServer","text":"RegLogServer R6 class use handling whole backend login registration component shinyApp.","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogServer.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Login and registration moduleServer — RegLogServer","text":"is_logged reactiveVal containing logical indicating user logged user_id reactiveVal containing character specifying logged user name. user logged , consist uuid generated uuid::UUIDgenerate user_mail reactiveVal cantaining character string specifying logged user mail. logged , contains NULL. account_id reactiveVal caintaining integer specifying logged user account's id number: SQL database equal value contained withing id variable. googlesheets database equal row number - 1 (header). logged, contains NULL. mail_message reactiveVal containing recent RegLogConnectorMessage received mailConnector message reactiveVal containing recent RegLogConnectorMessage received dbConnector generated RegLogServer . module_id character storing ID reglog_system module. dbConnector RegLogConnector object used communication database. Build-children classes RegLogDBIConnector RegLogGsheetConnector. mailConnector RegLogConnector object used sending emails. Built-children classes RegLogEmayiliConnector RegLogGmailrConnector. log list containing messages send received. UI_list_login reactiveVal holding tagList whole login UI. UI_list_resetPass reactiveVal holding tagList whole resetPass UI. UI_list_credsEdit reactiveVal holding tagList whole credentioals edit UI. UI_list_register reactiveVal holding tagList whole register UI.","code":""},{"path":[]},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogServer.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Login and registration moduleServer — RegLogServer","text":"RegLogServer$new() RegLogServer$logout() RegLogServer$get_logs() RegLogServer$clone()","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogServer.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Login and registration moduleServer — RegLogServer","text":"Initialize 'ReglogServer' moduleServer","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogServer.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Login and registration moduleServer — RegLogServer","text":"","code":"RegLogServer$new(   dbConnector,   mailConnector,   app_name = basename(getwd()),   app_address = NULL,   lang = \"en\",   custom_txts = NULL,   use_modals = TRUE,   module_id = \"login_system\" )"},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogServer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Login and registration moduleServer — RegLogServer","text":"dbConnector object class RegLogConnector handling reads writes database. Two available package RegLogDBIConnector RegLogGsheetsConnector. See documentation information usage creation custom dbConnectors. mailConnector object class RegLogConnector handling email sending user register confirmation password reset. Two available package RegLogEmayiliConnector RegLogGmailrConnector. See documentation information usage creation custom mailConnectors. app_name Name app refer correspondence users. Defaults name working directory. app_address URL refer correspondence users. left NULL, URL parsed session$clientData. lang character specyfiyng language use texts generated UI. Defaults 'en' English. Currently 'pl' Polish also supported. custom_txts named list containing character strings custom messages. Defaults NULL, built-strings used. use_modals either logical indicating (TRUE) none (FALSE) modalDialogs shown character vector indicating modals shown. information see details. module_id Character declaring id module. Defaults 'login_system'. Recommended keep way, unless cause namespace issues.","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogServer.html","id":"method-logout-","dir":"Reference","previous_headings":"","what":"Method logout()","title":"Login and registration moduleServer — RegLogServer","text":"Method logging logged user","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogServer.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Login and registration moduleServer — RegLogServer","text":"","code":"RegLogServer$logout()"},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogServer.html","id":"method-get-logs-","dir":"Reference","previous_headings":"","what":"Method get_logs()","title":"Login and registration moduleServer — RegLogServer","text":"Method receive saved logs object form single data.frame","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogServer.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Login and registration moduleServer — RegLogServer","text":"","code":"RegLogServer$get_logs()"},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogServer.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Login and registration moduleServer — RegLogServer","text":"data.frame","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogServer.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Login and registration moduleServer — RegLogServer","text":"objects class cloneable method.","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogServer.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Login and registration moduleServer — RegLogServer","text":"","code":"RegLogServer$clone(deep = FALSE)"},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogServer.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Login and registration moduleServer — RegLogServer","text":"deep Whether make deep clone.","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLogServer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Login and registration moduleServer — RegLogServer","text":"","code":"# Run only in interactive session #  if (interactive()) {      library(shiny.reglog)      # for exemplary setup temporary SQLite database will be created   library(\"DBI\")   library(\"RSQLite\")   temp_sqlite <- tempfile(fileext = \".sqlite\")   conn <- DBI::dbConnect(RSQLite::SQLite(),                          dbname = temp_sqlite)   DBI_tables_create(conn)   DBI::dbDisconnect(conn)      # create minimalistic UI   ui <- navbarPage(     title = \"RegLog system\",     tabPanel(\"Register\", RegLog_register_UI(\"custom_id\")),     tabPanel(\"Login\", RegLog_login_UI(\"custom_id\")),     tabPanel(\"Credentials edit\", RegLog_credsEdit_UI(\"custom_id\")),     tabPanel(\"Password reset\", RegLog_resetPass_UI(\"custom_id\"))   )      # create server logic   server <- function(input, output, session) {          # create dbConnector with connection to the temporary SQLite database     dbConnector <- RegLogDBIConnector$new(       driver = RSQLite::SQLite(),       dbname = temp_sqlite)          # create mockup mailConnector     mailConnector <- RegLogConnector$new()          # create RegLogServer     RegLog <- RegLogServer$new(       dbConnector = dbConnector,       mailConnector = mailConnector,       ## all arguments below are optional! ##       app_name = \"RegLog example\",       app_address = \"https://reglogexample.com\",       lang = \"en\",       # custom texts as a named list with strings       custom_txts = list(         user_id = \"Name of the user\",         register_success_t= \"Congratulations - you have been registered in                               successfully with RegLog system!\"),       # use modals as a named list of FALSE to inhibit specific modal       use_modals = list(         login_success = FALSE),       # custom module id - provide the same to the UI elements!       module_id = \"custom_id\")   }      shinyApp(ui, server) }"},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLog_credsEdit_UI.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Edit User Data UI for RegLog system — RegLog_credsEdit_UI","title":"Generate Edit User Data UI for RegLog system — RegLog_credsEdit_UI","text":"Generate Edit User Data UI RegLog system","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLog_credsEdit_UI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Edit User Data UI for RegLog system — RegLog_credsEdit_UI","text":"","code":"RegLog_credsEdit_UI(module_id = \"login_system\")"},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLog_credsEdit_UI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Edit User Data UI for RegLog system — RegLog_credsEdit_UI","text":"module_id Character declaring id module. Defaults 'login_system'. Recommended keep way, unless cause namespace issues.","code":""},{"path":[]},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLog_login_UI.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Login UI for RegLog system — RegLog_login_UI","title":"Generate Login UI for RegLog system — RegLog_login_UI","text":"Generate Login UI RegLog system","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLog_login_UI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Login UI for RegLog system — RegLog_login_UI","text":"","code":"RegLog_login_UI(module_id = \"login_system\")"},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLog_login_UI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Login UI for RegLog system — RegLog_login_UI","text":"module_id Character declaring id module. Defaults 'login_system'. Recommended keep way, unless cause namespace issues.","code":""},{"path":[]},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLog_register_UI.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Register UI for RegLog system — RegLog_register_UI","title":"Generate Register UI for RegLog system — RegLog_register_UI","text":"Generate Register UI RegLog system","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLog_register_UI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Register UI for RegLog system — RegLog_register_UI","text":"","code":"RegLog_register_UI(module_id = \"login_system\")"},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLog_register_UI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Register UI for RegLog system — RegLog_register_UI","text":"module_id Character declaring id module. Defaults 'login_system'. Recommended keep way, unless cause namespace issues.","code":""},{"path":[]},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLog_resetPass_UI.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate ResetPass code UI for RegLog system — RegLog_resetPass_UI","title":"Generate ResetPass code UI for RegLog system — RegLog_resetPass_UI","text":"Generate ResetPass code UI RegLog system","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLog_resetPass_UI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate ResetPass code UI for RegLog system — RegLog_resetPass_UI","text":"","code":"RegLog_resetPass_UI(module_id = \"login_system\")"},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLog_resetPass_UI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate ResetPass code UI for RegLog system — RegLog_resetPass_UI","text":"module_id Character declaring id module. Defaults 'login_system'. Recommended keep way, unless cause namespace issues.","code":""},{"path":[]},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLog_txt.html","id":null,"dir":"Reference","previous_headings":"","what":"Getting texts for given language — RegLog_txt","title":"Getting texts for given language — RegLog_txt","text":"Getting texts given language","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLog_txt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Getting texts for given language — RegLog_txt","text":"","code":"RegLog_txt(lang, x = NULL, custom_txts = NULL)"},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLog_txt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Getting texts for given language — RegLog_txt","text":"lang character identify language x character identify txt get. NULL, labels recovered custom_txts named list providing custom messages replace default specific languages.","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/RegLog_txt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Getting texts for given language — RegLog_txt","text":"'RegLog_txt' outside internal usage used getting structure texts generated 'shiny.reglog'. customize texts used RegLog objects, provide within call named list 'custom_txts' argument - passed 'custom_txts' within call. can check validity list providing 'custom_txts' calling function console. Values list provided named way default text willing replace.","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/create_gsheet_db.html","id":null,"dir":"Reference","previous_headings":"","what":"Create new 'googlesheet' reglog database — create_gsheet_db","title":"Create new 'googlesheet' reglog database — create_gsheet_db","text":"Used match deprecated 'login_server' function. Use gsheet_tables_create() create 'googlesheet'-based database new 'RegLogServer' object.","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/create_gsheet_db.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create new 'googlesheet' reglog database — create_gsheet_db","text":"","code":"create_gsheet_db(name = NULL, credentials = NULL, credentials_pass_hashed)"},{"path":"https://statismike.github.io/shiny.reglog/reference/create_gsheet_db.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create new 'googlesheet' reglog database — create_gsheet_db","text":"name specify name 'googlesheet' file. Defaults random name. credentials can pass credentials data create already populated tables. Provide data.frame object containing variables: timestamp, user_id, user_mail user_pass. multiple records user_id, recent kept . credentials_pass_hashed mandatory putting credentials data. passwords already hashed 'scrypt' package? Takes TRUE (hashed) FALSE (hashed need hashing)","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/create_gsheet_db.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create new 'googlesheet' reglog database — create_gsheet_db","text":"id 'googlesheet' file. creation need provide login_server().","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/create_gsheet_db.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create new 'googlesheet' reglog database — create_gsheet_db","text":"","code":"if(googlesheets4::gs4_has_token()){  gsheet.id <- create_gsheet_db()  database <- gsheet_get_db(gsheet.id)  # you can then pass 'gsheet.id' to you 'login_server' call # # login_server(db_method = \"gsheet\", #              gsheet_file = gsheet.id, #              ...) #  print(database)  googledrive::drive_trash(gsheet.id)  }"},{"path":"https://statismike.github.io/shiny.reglog/reference/create_sqlite_db.html","id":null,"dir":"Reference","previous_headings":"","what":"Create new 'SQLite' reglog database — create_sqlite_db","title":"Create new 'SQLite' reglog database — create_sqlite_db","text":"Used match deprecated 'login_server' function. Use DBI_tables_create() create tables 'DBI' supported database new 'RegLogServer' object.","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/create_sqlite_db.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create new 'SQLite' reglog database — create_sqlite_db","text":"","code":"create_sqlite_db(output_file, credentials = NULL, credentials_pass_hashed)"},{"path":"https://statismike.github.io/shiny.reglog/reference/create_sqlite_db.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create new 'SQLite' reglog database — create_sqlite_db","text":"output_file path new 'SQLite' database. creation need provide login_server() credentials can pass credentials data create already populated tables. Provide data.frame object containing variables: timestamp, user_id, user_mail user_pass. multiple records user_id, recent kept . credentials_pass_hashed specify put credentials data. passwords already hashed 'scrypt' package? Takes TRUE (hashed) FALSE (hashed need hashing)","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/create_sqlite_db.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create new 'SQLite' reglog database — create_sqlite_db","text":"","code":"sqlite.path <- tempfile(fileext = \"sqlite\")  create_sqlite_db(sqlite.path) #> Warning: `create_sqlite_db()` was deprecated in shiny.reglog 0.5.0. #> Please use `DBI_tables_create()` instead. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was generated.  database <- sqlite_get_db(sqlite.path) #> Warning: `sqlite_get_db()` was deprecated in shiny.reglog 0.5.0. #> Please use `DBI::dbReadTable()` instead. #> As the new version of RegLog system allows for much more flexibility old functionalities for reading data is deprecated. Please use functions from adequate package: in this instance, 'DBI' package. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was generated.  # you can then pass 'sqlite.path' to you 'login_server' call # # login_server(db_method = \"sqlite\", #              sqlite_db = sqlite.path, #              ...) #  print(database) #> $user_db #> [1] timestamp user_id   user_mail user_pass #> <0 rows> (or 0-length row.names) #>  #> $reset_db #> [1] timestamp  user_id    reset_code #> <0 rows> (or 0-length row.names) #>"},{"path":"https://statismike.github.io/shiny.reglog/reference/db_timestamp.html","id":null,"dir":"Reference","previous_headings":"","what":"function to create standardized timestamp — db_timestamp","title":"function to create standardized timestamp — db_timestamp","text":"function create standardized timestamp","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/db_timestamp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"function to create standardized timestamp — db_timestamp","text":"","code":"db_timestamp()"},{"path":[]},{"path":"https://statismike.github.io/shiny.reglog/reference/depr_txts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get texts for given language. Used within deprecated login_server — reglog_txt","text":"","code":"reglog_txt(lang, x = NULL, custom_txts = NULL)"},{"path":"https://statismike.github.io/shiny.reglog/reference/depr_txts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get texts for given language. Used within deprecated login_server — reglog_txt","text":"lang character identify language x character identify txt get. NULL, labels recovered custom_txts named list providing custom messages replace default specific languages.","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/depr_txts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get texts for given language. Used within deprecated login_server — reglog_txt","text":"'RegLog_txt' outside internal usage used getting structure texts generated 'shiny.reglog'. customize texts used RegLog objects, provide within call named list 'custom_txts' argument - passed 'custom_txts' within call. can check validity list providing 'custom_txts' calling function console. Values list provided named way default text willing replace.","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/emayili_custom_mail_handler.html","id":null,"dir":"Reference","previous_headings":"","what":"Emayili custom email sending handler — emayili_custom_mail_handler","title":"Emayili custom email sending handler — emayili_custom_mail_handler","text":"Default handler function parsing sending email. Used within object RegLogEmayiliConnector class internally. can send custom emails using subject, body attachments RegLogConnectorMessage type custom_mail.","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/emayili_custom_mail_handler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Emayili custom email sending handler — emayili_custom_mail_handler","text":"","code":"emayili_custom_mail_handler(self, private, message)"},{"path":"https://statismike.github.io/shiny.reglog/reference/emayili_custom_mail_handler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Emayili custom email sending handler — emayili_custom_mail_handler","text":"self R6 object element private R6 object element message RegLogConnectorMessage contain within data: process username email mail_subject mail_body mail_attachment (optional, needs class mailMessageAttachment)","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/emayili_custom_mail_handler.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Emayili custom email sending handler — emayili_custom_mail_handler","text":"RegLogEmayiliConnector message.","code":""},{"path":[]},{"path":"https://statismike.github.io/shiny.reglog/reference/emayili_reglog_mail_handler.html","id":null,"dir":"Reference","previous_headings":"","what":"Emayili email sending handler — emayili_reglog_mail_handler","title":"Emayili email sending handler — emayili_reglog_mail_handler","text":"Default handler function parsing sending email. Used within object RegLogEmayiliConnector class internally.","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/emayili_reglog_mail_handler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Emayili email sending handler — emayili_reglog_mail_handler","text":"","code":"emayili_reglog_mail_handler(self, private, message)"},{"path":"https://statismike.github.io/shiny.reglog/reference/emayili_reglog_mail_handler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Emayili email sending handler — emayili_reglog_mail_handler","text":"self R6 object element private R6 object element message RegLogConnectorMessage contain within data: process username email app_name app_address reset_code (optional reset code mails)","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/emayili_reglog_mail_handler.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Emayili email sending handler — emayili_reglog_mail_handler","text":"RegLogEmayiliConnector message.","code":""},{"path":[]},{"path":"https://statismike.github.io/shiny.reglog/reference/gmailr_custom_mail_handler.html","id":null,"dir":"Reference","previous_headings":"","what":"Gmailr custom email sending handler — gmailr_custom_mail_handler","title":"Gmailr custom email sending handler — gmailr_custom_mail_handler","text":"Default handler function parsing sending email. Used within object RegLogGmailrConnector class internally. can send custom emails using subject, body attachments RegLogConnectorMessage type custom_mail.","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/gmailr_custom_mail_handler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gmailr custom email sending handler — gmailr_custom_mail_handler","text":"","code":"gmailr_custom_mail_handler(self, private, message)"},{"path":"https://statismike.github.io/shiny.reglog/reference/gmailr_custom_mail_handler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gmailr custom email sending handler — gmailr_custom_mail_handler","text":"self R6 object element private R6 object element message RegLogConnectorMessage contain within data: process username email mail_subject mail_body mail_attachment (optional, needs class mailMessageAttachment)","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/gmailr_custom_mail_handler.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gmailr custom email sending handler — gmailr_custom_mail_handler","text":"RegLogGmailrConnector message.","code":""},{"path":[]},{"path":"https://statismike.github.io/shiny.reglog/reference/gmailr_reglog_mail_handler.html","id":null,"dir":"Reference","previous_headings":"","what":"Gmailr send email handler — gmailr_reglog_mail_handler","title":"Gmailr send email handler — gmailr_reglog_mail_handler","text":"Default handler function parsing sending register confirmation email newly registered user package. Used within object RegLogGmailrConnector class internally.","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/gmailr_reglog_mail_handler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gmailr send email handler — gmailr_reglog_mail_handler","text":"","code":"gmailr_reglog_mail_handler(self, private, message)"},{"path":"https://statismike.github.io/shiny.reglog/reference/gmailr_reglog_mail_handler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gmailr send email handler — gmailr_reglog_mail_handler","text":"self R6 object element private R6 object element message RegLogConnectorMessage contain within data: process username email app_name app_address reset_code (optional reset code mails)","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/gmailr_reglog_mail_handler.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gmailr send email handler — gmailr_reglog_mail_handler","text":"RegLogEmayiliConnector message.","code":""},{"path":[]},{"path":"https://statismike.github.io/shiny.reglog/reference/gsheet_credsEdit_handler.html","id":null,"dir":"Reference","previous_headings":"","what":"googlesheets edit to the database handler — gsheet_credsEdit_handler","title":"googlesheets edit to the database handler — gsheet_credsEdit_handler","text":"Default handler function querying database confirm credentials edit procedure update values saved within database. Used within object RegLogGsheetConnector class internally.","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/gsheet_credsEdit_handler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"googlesheets edit to the database handler — gsheet_credsEdit_handler","text":"","code":"gsheet_credsEdit_handler(self, private, message)"},{"path":"https://statismike.github.io/shiny.reglog/reference/gsheet_credsEdit_handler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"googlesheets edit to the database handler — gsheet_credsEdit_handler","text":"self R6 object element private R6 object element message RegLogConnectorMessage need contain within data: username password can also contain elements change: new_username new_email new_password","code":""},{"path":[]},{"path":"https://statismike.github.io/shiny.reglog/reference/gsheet_get_db.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to read googlesheets shiny.reglog database — gsheet_get_db","title":"Function to read googlesheets shiny.reglog database — gsheet_get_db","text":"new version RegLog system allows much flexibility old functionalities reading data deprecated. Please use functions adequate package: instance, 'googlesheets4' package.","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/gsheet_get_db.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to read googlesheets shiny.reglog database — gsheet_get_db","text":"","code":"gsheet_get_db(gsheet_db)"},{"path":"https://statismike.github.io/shiny.reglog/reference/gsheet_get_db.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to read googlesheets shiny.reglog database — gsheet_get_db","text":"gsheet_db ID 'googlesheets' database","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/gsheet_get_db.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to read googlesheets shiny.reglog database — gsheet_get_db","text":"list containing user_db reset_db dataframes","code":""},{"path":[]},{"path":"https://statismike.github.io/shiny.reglog/reference/gsheet_login_handler.html","id":null,"dir":"Reference","previous_headings":"","what":"googlesheets login handler — gsheet_login_handler","title":"googlesheets login handler — gsheet_login_handler","text":"Default handler function querying database confirm login procedure. Used within object RegLogGsheetConnector class internally.","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/gsheet_login_handler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"googlesheets login handler — gsheet_login_handler","text":"","code":"gsheet_login_handler(self, private, message)"},{"path":"https://statismike.github.io/shiny.reglog/reference/gsheet_login_handler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"googlesheets login handler — gsheet_login_handler","text":"self R6 object element private R6 object element message RegLogConnectorMessage contain within data: username password","code":""},{"path":[]},{"path":"https://statismike.github.io/shiny.reglog/reference/gsheet_register_handler.html","id":null,"dir":"Reference","previous_headings":"","what":"googlesheets register handler — gsheet_register_handler","title":"googlesheets register handler — gsheet_register_handler","text":"Default handler function querying database confirm registration validity input new data. Used within object RegLogGsheetConnector class internally.","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/gsheet_register_handler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"googlesheets register handler — gsheet_register_handler","text":"","code":"gsheet_register_handler(self, private, message)"},{"path":"https://statismike.github.io/shiny.reglog/reference/gsheet_register_handler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"googlesheets register handler — gsheet_register_handler","text":"self R6 object element private R6 object element message RegLogConnectorMessage contain within data: username password email","code":""},{"path":[]},{"path":"https://statismike.github.io/shiny.reglog/reference/gsheet_resetPass_confirmation_handler.html","id":null,"dir":"Reference","previous_headings":"","what":"googlesheets resetpass code confirmation handler — gsheet_resetPass_confirmation_handler","title":"googlesheets resetpass code confirmation handler — gsheet_resetPass_confirmation_handler","text":"Default handler function querying database confirm credentials edit procedure update values saved within database. Used within object RegLogGsheetConnector class internally.","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/gsheet_resetPass_confirmation_handler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"googlesheets resetpass code confirmation handler — gsheet_resetPass_confirmation_handler","text":"","code":"gsheet_resetPass_confirmation_handler(self, private, message)"},{"path":"https://statismike.github.io/shiny.reglog/reference/gsheet_resetPass_confirmation_handler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"googlesheets resetpass code confirmation handler — gsheet_resetPass_confirmation_handler","text":"self R6 object element private R6 object element message RegLogConnectorMessage need contain within data: username reset_code password","code":""},{"path":[]},{"path":"https://statismike.github.io/shiny.reglog/reference/gsheet_resetPass_generation_handler.html","id":null,"dir":"Reference","previous_headings":"","what":"googlesheets resetpass code generation handler — gsheet_resetPass_generation_handler","title":"googlesheets resetpass code generation handler — gsheet_resetPass_generation_handler","text":"Default handler function querying database confirm credentials edit procedure update values saved within database. Used within object RegLogGsheetConnector class internally.","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/gsheet_resetPass_generation_handler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"googlesheets resetpass code generation handler — gsheet_resetPass_generation_handler","text":"","code":"gsheet_resetPass_generation_handler(self, private, message)"},{"path":"https://statismike.github.io/shiny.reglog/reference/gsheet_resetPass_generation_handler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"googlesheets resetpass code generation handler — gsheet_resetPass_generation_handler","text":"self R6 object element private R6 object element message RegLogConnectorMessage need contain within data: username","code":""},{"path":[]},{"path":"https://statismike.github.io/shiny.reglog/reference/gsheet_tables_create.html","id":null,"dir":"Reference","previous_headings":"","what":"Create RegLog-valid database tables with googlesheets4 — gsheet_tables_create","title":"Create RegLog-valid database tables with googlesheets4 — gsheet_tables_create","text":"Create RegLog-valid database tables googlesheets4","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/gsheet_tables_create.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create RegLog-valid database tables with googlesheets4 — gsheet_tables_create","text":"","code":"gsheet_tables_create(   account_name = \"account\",   reset_code_name = \"reset_code\",   use_log = FALSE,   log_name = \"logs\",   user_data = NULL,   hash_passwords = FALSE,   gsheet_ss = NULL,   gsheet_name = NULL,   verbose = TRUE )"},{"path":"https://statismike.github.io/shiny.reglog/reference/gsheet_tables_create.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create RegLog-valid database tables with googlesheets4 — gsheet_tables_create","text":"account_name Name sheet storing user accounts credentials. Defaults 'account'. Mandatory spreadsheet. reset_code_name Name sheet storing generated password reset codes. Defaults 'reset_code'. Mandatory table. use_log sheet keeping RegLogServer logs also created? Defaults FALSE log_name Name sheet storing logs RegLogServer object. Used use_log = TRUE. Defaults logs user_data wish import existing user database, can input data.frame table argument. contain columns: username, password, email. Defaults NULL. hash_passwords importing table users upon tables creation, can also specify password hashed using scrypt::hashPassword. Defaults FALSE. unhashed passwords imported table, set option TRUE. gsheet_ss ID googlesheet want append created tables . Defaults NULL, means creating new googlesheet. gsheet_name gsheet_ss = NULL new googlesheet generated, can choose choose name. left default NULL, name generated randomly. verbose Boolean specific actions made function printed back console. Defaults TRUE. affect googlesheets4 generated messages. silence , use options(googlesheets4_quiet = TRUE) script .","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/gsheet_tables_create.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create RegLog-valid database tables with googlesheets4 — gsheet_tables_create","text":"ID googlesheet","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/gsheet_tables_create.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create RegLog-valid database tables with googlesheets4 — gsheet_tables_create","text":"Created spreadsheets following structure: account (default name) username: character password: character email: character create_time: character update_time: character reset_code (default name) user_id: numeric reset_code: character used: numeric create_time: character update_time: character logs (default name, optional) time: character session: character direction: character type: character note: character","code":""},{"path":[]},{"path":"https://statismike.github.io/shiny.reglog/reference/gsheet_tables_create.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create RegLog-valid database tables with googlesheets4 — gsheet_tables_create","text":"","code":"if (googlesheets4::gs4_has_token()) {   library(shiny.reglog)      # mockup user data   user_data <-      data.frame(username = c(\"Whatever\", \"Hanuka\", \"Helsinki\", \"How_come\"),                 password = c(\"&f5*MSYj^niDt=V'3.[dyEX.C/\", \"%}&B[fs\\\\}5PKE@,*+V\\\\tx9\\\"at]\",                              \"35z*ofW\\\\'G_8,@vCC`]~?e$Jm%\", \"s:;r_eLn?-D6;oA-=\\\"^R(-Ew<x\"),                 email = c(\"what@mil.com\", \"hehe@soso.so\", \"nider@what.no\", \"crazzz@simpsy.com\"))      # create the tables and input the data (hashing the passwords in the process)   id <- gsheet_tables_create(user_data = user_data,                              hash_passwords = TRUE,                              verbose = FALSE)      # check generated googlesheet   googlesheets4::gs4_get(id)      # check the \"account\" sheet for credentials data   googlesheets4::read_sheet(id, \"account\")      # remove example googlesheets   googledrive::drive_trash(id) }"},{"path":"https://statismike.github.io/shiny.reglog/reference/login_UI.html","id":null,"dir":"Reference","previous_headings":"","what":"Shiny UI module for login box — login_UI","title":"Shiny UI module for login box — login_UI","text":"need used conjuction login_server() function suggested used alongside password_reset_UI() register_UI() full potential. function creates UI div() element containing informations input necessary user log-. outputs div() element, can put inside container choosing (tabItem, fluidPage, fluidRow etc.)","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/login_UI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shiny UI module for login box — login_UI","text":"","code":"login_UI(id = \"login_system\", lang = \"en\", custom_txts = NULL)"},{"path":"https://statismike.github.io/shiny.reglog/reference/login_UI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shiny UI module for login box — login_UI","text":"id id module. Defaults \"login_system\" modules contained within package. plan use serveral login systems inside app reason need change , remember keep consistent id elements module. lang specifies app used language. Accepts \"en\" \"pl\". Defaults \"en\" custom_txts named list containing customized texts. details, see documentation 'reglog_txt'. Provided list can contain elements used function, recommended provide list every 'shiny.reglog' function","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/login_UI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shiny UI module for login box — login_UI","text":"'tags$div' containing elements login procedure","code":""},{"path":[]},{"path":"https://statismike.github.io/shiny.reglog/reference/login_server.html","id":null,"dir":"Reference","previous_headings":"","what":"Login server module — login_server","title":"Login server module — login_server","text":"function become deprecated. New RegLog system based RegLogServer R6 class. Shiny server module optional login/registration system function creates server module handle modules system: login_UI(), password_reset_UI() register_UI uses database contained 'googlesheet' file 'gdrive' 'SQLite' database locally read write data users. need create 'googlesheet' 'SQLite' using create_gsheet_db() create_sqlite_db() respectively.","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/login_server.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Login server module — login_server","text":"","code":"login_server(   id = \"login_system\",   db_method,   mail_method,   appname,   appaddress,   lang = \"en\",   gsheet_file,   sqlite_db,   gmailr_user,   emayili_user,   emayili_password,   emayili_host,   emayili_port,   custom_txts = NULL,   use_login_modals = list(UserNotFound = T, WrongPass = T, Success = T) )"},{"path":"https://statismike.github.io/shiny.reglog/reference/login_server.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Login server module — login_server","text":"id id module. Defaults \"login_system\" modules contained within package. plan use serveral login systems inside app reason need change , remember keep consistent id elements module. db_method character string containing chosen database container, either: \"gsheet\" (needing installation 'googlesheets4' package) \"sqlite\" (needing installation 'DBI' 'RSQLite' packages) mail_method character string containing chosen method sending emails, either: \"gmailr\" (needing installation 'gmailr' package) \"emayili\" (needing installation 'emayili' package) appname character string containing name application (used automatic e-mails information purposes) appaddress character value containing web address application (used automatic e-mails information purposes) lang specifies app used language. Accepts \"en\" \"pl\". Defaults \"en\" gsheet_file ID 'googlesheet' file holding database. contained within URL address googlesheet (: db_method = \"gsheet\") sqlite_db path 'SQLite' database (: db_method = \"sqlite\") gmailr_user gmail address (: db_method = \"gmailr\") emayili_user email address, also used login email account (: db_method = \"emayili\") emayili_password password email account (: db_method = \"emayili\") emayili_host host email box (: db_method = \"emayili\") emayili_port port email box (: db_method = \"emayili\") custom_txts named list containing customized texts. details, see documentation 'reglog_txt'. Provided list can contain elements used function, recommended provide list every 'shiny.reglog' function use_login_modals list logicals indicating modalDialog log-shown. Defaults named list logicals: UserNotFound = T WrongPass = T Success = T","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/login_server.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Login server module — login_server","text":"reactiveValues() object three elements: is_logged, containing boolean describing authorization status user_id, containing logged user identification name. logged, contains timestamp session start user_mail, containing logged user mail. logged, empty character string nchar() value 0: (\"\") last_state_change, containing string describing last change login system state. Currently supports state changes login procedure","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/login_server.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Login server module — login_server","text":"module logic creates reactiveValues() object loaded database users reset codes stored session$userData. allows cut reading database one read per loading app - unfortunately makes app run slowly database users gets long. Registration new account mails confirmation e-mail end user provided e-mail. Provided e-mail needed password reset: 10 digits code generated mailed user confirm identity. Reset code remains valid 24 hours.","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/login_server.html","id":"authorization","dir":"Reference","previous_headings":"","what":"Authorization","title":"Login server module — login_server","text":"using db_method \"gsheet\" need authorize access google drive outside functions (using googlesheets4:gs_auth() default scopes: \"https://www.googleapis.com/auth/spreadsheets\") using mail_method \"emayili\" need allow \"less secure apps\" use mailbox using mail_method \"gmailr\" need authorize access gmail box creating Oauth2 App 'Google Cloud Platform' passing gmailr::gm_auth_configure() allowing scopes: \"https://www.googleapis.com/auth/gmail.send\"","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/login_server.html","id":"security","dir":"Reference","previous_headings":"","what":"Security","title":"Login server module — login_server","text":"passwords reset codes hashed help 'scrypt' package extra security gmailr mail_method seems secure intend use 'gmail' account send emails. 'emayili' suggested using mailboxes.","code":""},{"path":[]},{"path":"https://statismike.github.io/shiny.reglog/reference/login_server.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Login server module — login_server","text":"","code":"## Only run this example in interactive R sessions  if(interactive()){      #### example of db_method = \"sqlite\" and mail_method = \"emayili\"      library(shiny)   library(shiny.reglog)      # initializing sqlite      sqlite.path <- tempfile(fileext = \"sqlite\")   create_sqlite_db(sqlite.path)   database <- sqlite_get_db(sqlite.path)      # Define UI containing shiny.reglog modules   ui <- fluidPage(          headerPanel(title = \"shiny.reglog test\"),          tabsetPanel(       tabPanel(\"Values\",                 # table of returned data for active user                dataTableOutput(\"active_user_values\"),                # table of session$userData$reactive_db$user_db loaded at the start of session                dataTableOutput(\"user_db\"),                # table of session$userData$reactive_db$reset_db loaded at the start of session                dataTableOutput(\"reset_db\")       ),       tabPanel(\"Login\", login_UI()),       tabPanel(\"Register\", register_UI()),       tabPanel(\"Reset Password\", password_reset_UI()),       tabPanel(\"Logout\", logout_button())            )   )      server <- function(input, output, session) {          # login server with specified methods for database and mailing     # to run it you need to replace placeholders with your details and      # cofigure it for your needs          auth <- login_server(       db_method = \"sqlite\",       mail_method = \"emayili\",       appname = \"shiny.reglog example\",       appaddress = \"not-on-net.com\",       sqlite_db = sqlite.path,       # arguments below need configuration for your mailing account       emayili_user = \"your_email_address\",       emayili_password = \"your_email_password\",       emayili_port = \"your_email_box_port\",       emayili_host = \"your_email_box_host\"     )          # table of values returned by login_server          output$active_user_values <- renderDataTable({       data.frame(is_logged = auth$is_logged,                  user_id = auth$user_id,                  user_mail = auth$user_mail       )     })          # tibbles contained within session$userData$reactive_db         output$user_db <- renderDataTable(       session$userData$reactive_db$user_db     )          output$reset_db <- renderDataTable(       session$userData$reactive_db$reset_db     )   }      # Run the application    shinyApp(ui = ui, server = server)    }"},{"path":"https://statismike.github.io/shiny.reglog/reference/logout_button.html","id":null,"dir":"Reference","previous_headings":"","what":"Action Button for logging out — logout_button","title":"Action Button for logging out — logout_button","text":"used conjuction deprecated login_server() Simple action button - pressing , user logged .","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/logout_button.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Action Button for logging out — logout_button","text":"","code":"logout_button(id = \"login_system\", lang = \"en\", custom_txts = NULL)"},{"path":"https://statismike.github.io/shiny.reglog/reference/logout_button.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Action Button for logging out — logout_button","text":"id id module. Defaults \"login_system\" modules contained within package. plan use serveral login systems inside app reason need change , remember keep consistent id elements module. lang lang specifies app used language. Accepts \"en\" \"pl\". Defaults \"en\" custom_txts named list containing customized texts. details, see documentation 'reglog_txt'. Provided list can contain elements used function, recommended provide list every 'shiny.reglog' function","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/logout_button.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Action Button for logging out — logout_button","text":"'actionButton' logout","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/mailMessageAttachment.html","id":null,"dir":"Reference","previous_headings":"","what":"Mail attachment data to be handled by mailConnector via custom_mail RegLogConnectorMessage — mailMessageAttachment","title":"Mail attachment data to be handled by mailConnector via custom_mail RegLogConnectorMessage — mailMessageAttachment","text":"Mail attachment data handled mailConnector via custom_mail RegLogConnectorMessage","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/mailMessageAttachment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mail attachment data to be handled by mailConnector via custom_mail RegLogConnectorMessage — mailMessageAttachment","text":"","code":"mailMessageAttachment(filepath, filename = NULL, cid = NULL, filetype = NULL)"},{"path":"https://statismike.github.io/shiny.reglog/reference/mailMessageAttachment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mail attachment data to be handled by mailConnector via custom_mail RegLogConnectorMessage — mailMessageAttachment","text":"filepath path file attached filename name file used (supported RegLogEmayiliConnector) cid content ID used access email body filetype mime type attached file","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/mailMessageAttachment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mail attachment data to be handled by mailConnector via custom_mail RegLogConnectorMessage — mailMessageAttachment","text":"mailMessageAttachment object","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/password_reset_UI.html","id":null,"dir":"Reference","previous_headings":"","what":"Shiny UI module for password reset — password_reset_UI","title":"Shiny UI module for password reset — password_reset_UI","text":"need used conjuction login_server() function suggested used alongside login_UI() register_UI() full potential. function creates UI div() element containing informations input necessary user reset password. outputs div() element, can put inside container choosing (tabItem, fluidPage, fluidRow etc.). important mention password reset procedure invokes modalDialog(), avoided contain function inside one.","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/password_reset_UI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shiny UI module for password reset — password_reset_UI","text":"","code":"password_reset_UI(id = \"login_system\", lang = \"en\", custom_txts = NULL)"},{"path":"https://statismike.github.io/shiny.reglog/reference/password_reset_UI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shiny UI module for password reset — password_reset_UI","text":"id id module. Defaults \"login_system\" modules contained within package. plan use serveral login systems inside app reason need change , remember keep consistent id elements module. lang specifies app used language. Accepts \"en\" \"pl\". Defaults \"en\" custom_txts named list containing customized texts. details, see documentation 'reglog_txt'. Provided list can contain elements used function, recommended provide list every 'shiny.reglog' function","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/password_reset_UI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shiny UI module for password reset — password_reset_UI","text":"'tags$div' containing elements password reset procedure","code":""},{"path":[]},{"path":"https://statismike.github.io/shiny.reglog/reference/register_UI.html","id":null,"dir":"Reference","previous_headings":"","what":"Shiny UI module for registration box — register_UI","title":"Shiny UI module for registration box — register_UI","text":"need used conjuction login_server() function suggested used alongside login_UI() password_reset_UI() full potential. function creates UI div() element containing informations input necessary user register new account. outputs div() element, can put inside container choosing (tabItem, fluidPage, fluidRow etc.)","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/register_UI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shiny UI module for registration box — register_UI","text":"","code":"register_UI(id = \"login_system\", lang = \"en\", custom_txts = NULL)"},{"path":"https://statismike.github.io/shiny.reglog/reference/register_UI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shiny UI module for registration box — register_UI","text":"id id module. Defaults \"login_system\" modules contained within package. plan use serveral login systems inside app reason need change , remember keep consistent id elements module. lang specifies app used language. Accepts \"en\" \"pl\". Defaults \"en\" custom_txts named list containing customized texts. details, see documentation 'reglog_txt'. Provided list can contain elements used function, recommended provide list every 'shiny.reglog' function","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/register_UI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shiny UI module for registration box — register_UI","text":"'tags$div' containing elements registration procedure","code":""},{"path":[]},{"path":"https://statismike.github.io/shiny.reglog/reference/shiny.reglog-package.html","id":null,"dir":"Reference","previous_headings":"","what":"shiny.reglog: Optional Login and Registration Module System for ShinyApps — shiny.reglog-package","title":"shiny.reglog: Optional Login and Registration Module System for ShinyApps — shiny.reglog-package","text":"RegLog system provides set shiny modules handle register procedure users, alongside login, edit credentials password reset functionality. provides support popular SQL databases optionally googlesheet-based database easy setup. email sending provides support 'emayili' 'gmailr' backends. Architecture makes customizing usability pretty straightforward. authentication system created shiny.reglog designed optional: user need logged-access application, logged-user data can used read write relational databases.","code":""},{"path":[]},{"path":"https://statismike.github.io/shiny.reglog/reference/shiny.reglog-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"shiny.reglog: Optional Login and Registration Module System for ShinyApps — shiny.reglog-package","text":"Maintainer: Michal Kosinski kosinski.mich@gmail.com (ORCID)","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/sqlite_get_db.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to read SQLite shiny.reglog database — sqlite_get_db","title":"Function to read SQLite shiny.reglog database — sqlite_get_db","text":"new version RegLog system allows much flexibility old functionalities reading data deprecated. Please use functions adequate package: instance, 'DBI' package.","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/sqlite_get_db.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to read SQLite shiny.reglog database — sqlite_get_db","text":"","code":"sqlite_get_db(sqlite_db)"},{"path":"https://statismike.github.io/shiny.reglog/reference/sqlite_get_db.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to read SQLite shiny.reglog database — sqlite_get_db","text":"sqlite_db path 'SQLite' database","code":""},{"path":"https://statismike.github.io/shiny.reglog/reference/sqlite_get_db.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to read SQLite shiny.reglog database — sqlite_get_db","text":"list containing user_db reset_db dataframes","code":""},{"path":[]},{"path":"https://statismike.github.io/shiny.reglog/news/index.html","id":"shinyreglog-050","dir":"Changelog","previous_headings":"","what":"shiny.reglog 0.5.0","title":"shiny.reglog 0.5.0","text":"CRAN release: 2022-03-25 release v0.5.0 lot changes current implementation RegLog system. changes implemented provide customization options implementing shiny.reglog ShinyApp widen possibilities. time ’ve strived make historical features still accessible, shouldn’t harder use novice Shiny developers. Instead using single function run logic RegLog system (case deprecated login_server) introduces three main components: RegLogServer, two dbConnectors two mailConnectors. listed main changes improvements previous release. details can read two detailed vignettes: RegLogServer object: fields methods Creating custom RegLogConnector handlers. main logic now encapsulated RegLogServer R6 class. Arguments provided initialization object provide options customization, importantly objects classes providing connection database (RegLogDBIConnector RegLogGsheetConnector) e-mail provider (RegLogEmayiliConnectororRegLogGmailrConnector).  - application can now observe state changes made lifespan application accessing theRegLogServer$message()` reactiveVal. - default *modalDialogs* can now inhibited - either together (`use_modals = F`) specifically (providing named list `FALSE` bool values `use_modals` argument) - `is_logged`, `user_id`, `user_mail` values now kept inside *reactiveVal* fields, need add `()` access values (eg. `RegLogServer$user_id()). Also,account_id` value added logged users. improved presentation password reset procedure don’t make necessary invoking modalDialog. makes UI flexible process flexible. also added logic credentials change procedure: now possible change password, user ID user e-mail registration. made additional improvements: now mirrors behaviour SQL databases: password changes don’t append new rows googlesheet, changes whole row accordingly, makes menaging database much simpler. class RegLogDBIConnector provides support storing userbase inside DBI handled database. improves original support SQLite database, providing also --box support multiple MySQL, MariaDB PostgreSQL databases. allow explicitly modifying send e-mails users. send e-mails register, reset password credentials change procedure (user ID /e-mail). also support sending custom e-mails custom events. dbConnectors mailConnectors allow appending custom handler functions, either modify default ones providing completely new functionalities. sum , newly introduced functions/classes deprecated ancestors: RegLogServer class replaces login_server RegLog_login_UI function replaces login_UI RegLog_register_UI function replaces register_UI RegLog_resetPass_UI function replaces password_reset_UI RegLog_credsEdit_UI function introduces credential edit UI functionality. RegLogDBIConnector class replaces login_server(db_method = \"sqlite\") widen usability RegLogGsheetConnector class replaces login_server(db_method = \"gsheet\") RegLogEmayiliConnector class replaces login_server(email_method = \"emayili\") RegLogGmailrConnector class replaces login_server(email_method = \"gmailr\") RegLog_txt function replaces reglog_txt DBI_tables_create function replaces create_sqlite_db added functionality gsheet_tables_create replaces create_gsheet_db RegLogConnectorMessage function parse messages connectors RegLogConnector class inherit creation connectors Deprecated without direct replacement: logout_button: using RegLogServer$logout() method creating logout logic straightforward. sqlite_get_db gsheet_get_db: getting tables sheets straightforward using functions DBI googlesheets4 packages","code":""},{"path":"https://statismike.github.io/shiny.reglog/news/index.html","id":"shinyreglog-042","dir":"Changelog","previous_headings":"","what":"shiny.reglog 0.4.2","title":"shiny.reglog 0.4.2","text":"Added optional argument login_server: use_login_modals enabling developer silence systemic modals login attempts “init”, state change made “login_UserNotFound”, user tried login non-existing username “login_WrongPass”, user provided incorrect password “login_Success”, user logged successfully","code":""},{"path":"https://statismike.github.io/shiny.reglog/news/index.html","id":"shinyreglog-040","dir":"Changelog","previous_headings":"","what":"shiny.reglog 0.4.0","title":"shiny.reglog 0.4.0","text":"Added credentials argument create_gsheet_db, mirroring functionality create_sqlite_db Added logout_button function, providing users way log usage ShinyApp Added description provide credentials create_sqlite_db create_gsheet_db functions Created vignette specifying authorization process gmailr googlesheets4 use methods email sending database storage Removed dbplyr dependency","code":""},{"path":"https://statismike.github.io/shiny.reglog/news/index.html","id":"shinyreglog-030","dir":"Changelog","previous_headings":"","what":"shiny.reglog 0.3.0","title":"shiny.reglog 0.3.0","text":"Added credentials argument create_sqlite_db create SQLite database containing data Removed use_language exported functions, functionality minimal usage context sqlite_get_db gsheet_get_db functions now exported, functionality grew added credentials argument Fixed user_id value returned login_server function anonymous users. now form paste(\"Anon\", Sys.time(), sep = \"_\") force reads character object. read datetime object reading ‘googlesheets’ database caused bugs","code":""},{"path":"https://statismike.github.io/shiny.reglog/news/index.html","id":"shinyreglog-0200","dir":"Changelog","previous_headings":"","what":"shiny.reglog 0.2.0.0","title":"shiny.reglog 0.2.0.0","text":"Added NEWS.md file track changes package. Added function create valid databases usage shiny.reglog system: create_sqlite_db create_gsheet_db","code":""}]
