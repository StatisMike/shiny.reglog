% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/login_server.R
\name{login_server}
\alias{login_server}
\title{Shiny server module for the login/registration system}
\usage{
login_server(
  id = "login_system",
  gsheet_file,
  gmail_user,
  gmail_password,
  appname,
  appaddress,
  lang = "eng"
)
}
\arguments{
\item{id}{the id of the module. Defaults to "login_system" for all of the modules contained within the package. If you plan to use serveral login systems inside your app or for any other reason need to change it, remember to keep consistent id for all elements of module.}

\item{gsheet_file}{the ID of your googlesheet holding the database. It is contained within URL adress of your googlesheet}

\item{gmail_user}{the gmail e-mail address which will be used by application to send automatic messages to your users}

\item{gmail_password}{the password to gmail account specified above}

\item{appname}{the character value containing name of your application (it will be used in automatic e-mails for information purposes)}

\item{appaddress}{the character value containing the web address of your application (it will be used in automatic e-mails for information purposes)}

\item{lang}{specifies the app used language. Defaults to "eng" for English. Package also supports "pl" for Polish}
}
\value{
reactiveValues() object with three elements:

active_user, containing either "not_logged" before log-in or row of the user data from database after log-in (timestamp, user_id, user_mail, user_pass)

user_db, containing the user database loaded from googlesheets

reset_db, containing the reset code database loaded from googlesheets
}
\description{
This function creates a server module to handle other modules of the system: \code{login_UI()}, \code{password_reset_UI()} and \code{register_UI}
}
\details{
It uses database contained in googlesheet file on your gdrive to read and write data of the users. You need to create a googlesheet containing at least two sheets with specific columns:

user_db with columns named: "timestamp", "user_id", "user_mail" and "user_pass"

reset_db with columns named: "timestamp", "user_id", "reset_code"

You need to also authorize access to your google drive package outside of the function (fe: using googlesheets4:gs_auth) - in the global.R or in the beginning of app.R file.

The module logic creates a reactiveValues() object with loaded database of users and reset codes. It allows to cut the reading from database to only one read per loading of the app - unfortunately it makes the app run slowly if the database of users gets very long.

Registration of new account mails the confirmation e-mail to the end user on provided e-mail.

Provided e-mail is needed for password reset: 10 digits code is generated and mailed to the user to confirm his or her identity. Reset code remains valid for 24h.

Both passwords and reset_codes are hashed with the help of \code{scrypt} package for the extra security.
}
\examples{
# simple dashboard with login and register functionality
# UI containing login_UI, password_reset_UI and register_UI as different tabs

UI <- dashboardPage(

header = dashboardHeader(title = "Test for login modules"),

sidebar = dashboardSidebar(
  sidebarMenu(
      menuItem("Login", tabName = "login"),
          menuItem("Reset password", tabName = "resetpass"),
              menuItem("Register", tabName = "register"))
              ),

body = dashboardBody(
   tabItems(
       tabItem("login",
          fluidPage(login_UI())),
       tabItem("resetpass",
          fluidPage(password_reset_UI())),
       tabItem("register",
          fluidPage(register_UI()))
             )
       )
 )

# server authorizing gdrive access and including the login_server function

server <- function(input, output, session){

  googlesheets4::gs4_auth()

# the reactive_db is reactiveValues() object to access your data in the app

  reactive_db <- login_server(gsheet_file = "your_spreadsheet_id",
                              gmail_user = "my_mail@gmail.com",
                              gmail_password = "my_password",
                              appname = "Login_test",
                              appaddress = "logintest.com")

 }

# shinyApp initialization

 shinyApp(ui = UI, server = server)
}
\seealso{
\code{\link[=login_UI]{login_UI()}} for the login window in UI

\code{\link[=password_reset_UI]{password_reset_UI()}} for the password reset window in UI

\link{register_UI} for the registration window in UI
}
